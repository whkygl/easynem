temp = object@temp
PCoA1 = meta[,3]
PCoA2 = meta[,4]
group = meta[,2]
PCoA1
PCoA2
temp[1]
p = ggplot2::ggplot(meta,aes(x=PCoA1,y=PCoA2,color=!!sym(colnames(group))))+
ggplot2::labs(x = temp[1], y=temp[2], title=temp[3])+geom_point(size=4)
p
meta
temp
p = ggplot2::ggplot(meta,aes(x=PC1,y=PC2,color=!!sym(colnames(group))))
p = p+ggplot2::labs(x = temp[1], y=temp[2], title=temp[3])+geom_point(size=4)+
ggplot2::scale_color_manual(values = my_color)+
ggplot2::theme(legend.title = ggplot2::element_blank())+
ggplot2::theme_test() + ggplot2::coord_fixed(1)
p
setGeneric("nem_plot", function(object,...){
standardGeneric("nem_plot")
})
setMethod("nem_plot", signature("beta"), function(object, level = 0, type = 1){
# object = pca
my_color <- c("#4f72d2","#E64B35","#4DBBD5","#F2A900","#00A087","#3C5488",
"#F39B7F","#0096b0","#DC0000","#c06e26",
"#b5426a")
meta = object@meta
result = object@result
temp = object@temp
if (length(result) == 1){
NMDS1 = meta[,3]
NMDS2 = meta[,4]
group = meta[,2]
p = ggplot2::ggplot(meta,aes(x=NMDS1,y=NMDS2,color=!!sym(colnames(group))))+
ggplot2::labs(x=colnames(NMDS1),y = colnames(NMDS2), title=temp)+geom_point(size=4)+
ggplot2::scale_color_manual(values = my_color)+
ggplot2::theme(legend.title = ggplot2::element_blank())+
ggplot2::theme_test() + ggplot2::coord_fixed(1)
} else {
PCoA1 = meta[,3]
PCoA2 = meta[,4]
group = meta[,2]
if (colnames(PCoA1)=="PCoA1"){
p = ggplot2::ggplot(meta,aes(x=PCoA1,y=PCoA2,color=!!sym(colnames(group))))
} else {
p = ggplot2::ggplot(meta,aes(x=PC1,y=PC2,color=!!sym(colnames(group))))
}
p = p+ggplot2::labs(x = temp[1], y=temp[2], title=temp[3])+geom_point(size=4)+
ggplot2::scale_color_manual(values = my_color)+
ggplot2::theme(legend.title = ggplot2::element_blank())+
ggplot2::theme_test() + ggplot2::coord_fixed(1)
if (level > 0){
if (type == 1){
p = p+ggplot2::stat_ellipse(level=level)
} else if(type == 2){
p = p+ggalt::geom_encircle(aes(fill=group), alpha = 0.1, show.legend = F)
} else {
stop("Type value must be 1 or 2.")
}
} else if (level == 0){
p
} else {
stop("Invalid level value.")
}
}
})
p = nem_plot(pcoa)
p
p = nem_plot(nmds)
p
rm(list = ls())
# 定义S4的easynem类
setClass("easynem",
slots = list(
tab = "data.frame",
tax = "data.frame",
meta = "data.frame"
))
.easynem <- new("easynem")
# 定义可向easynem类添加元素的read_tab函数
read_nem <- function(tab=0, tax=0, meta=0, ...){
if(tab != 0){
tab = readr::read_csv(tab, show_col_types = FALSE, ...)
.easynem@tab = tab
} else {
warning("Otutab has not been imported yet")
}
if(tax != 0){
tax = readr::read_csv(tax, show_col_types = FALSE, ...)
.easynem@tax = tax
} else {
warning("Taxonomy has not been imported yet")
}
if(meta != 0){
meta = readr::read_csv(meta, show_col_types = FALSE, ...)
.easynem@meta = meta
} else {
warning("Metadata has not been imported yet")
}
return(.easynem)
}
hehe <- read_nem(tab = "bacotu.csv", meta = "meta.csv", tax = "bactax.csv")
methods::setClass("beta",
slots = list(
meta = "data.frame",
result = "data.frame",
temp = "character"
))
methods::setMethod("show", "beta", function(object){
cat("This is an beta object\n")
cat("The difference comparison is:\n")
print(object@result)
})
#' calc_beta
#' @description Calculate beata diversity and generate results for multiple comparisons between treatments.
#' @param data easynem type data.
#' @param type pca, pcoa or nmds.
#' @param ... Other parameters for cmdscale and vegdist functions.
#' @return An beta object.
#' @export
calc_beta <- function(data, type, .group, method, ...){
# data = hehe
# .group = "con_crop"
# method = "bray"
p_list = c("pairwiseAdonis")
for (p in p_list) {
if (!requireNamespace(p)) {
remotes::install_github(p)
}
type = deparse(substitute(type))
.group = deparse(substitute(.group))
.beta = methods::new("beta")
otu = as.data.frame(data@tab)
row.names(otu) = otu[,1]
otu = otu[,-1]
otu2 = t(otu)
meta = as.data.frame(data@meta)
meta = meta[,c(1, which(names(meta) == .group))]
row.names(meta) = meta[,1]
dist = vegan::vegdist(t(otu), binary = FALSE, scale= TRUE,center = TRUE, ...)
if (type == 'pcoa'){
pcoa = cmdscale(dist, k = 3, eig =TRUE, ...)
pcoa_points = as.data.frame(pcoa$points)
sum_eig = sum(pcoa$eig)
eig_percent = round(pcoa$eig/sum_eig*100,1)
colnames(pcoa_points) <- paste0("PCoA", 1:3)
inter = intersect(rownames(meta), rownames(pcoa_points))
meta = meta[inter,]
pcoa_points = pcoa_points[inter,]
pcoa_result = cbind(meta, pcoa_points)
x=paste("PCoA 1 (", eig_percent[1], "%)", sep="")
y=paste("PCoA 2 (", eig_percent[2], "%)", sep="")
formula_str = paste("otu2~", .group)
formula_obj = as.formula(formula_str)
div = vegan::adonis2(formula_obj, data = meta, permutations = 999, ...)
adonis = paste0("adonis: R2=",round(div$R2,3), "; p=",div$`Pr(>F)`)
temp = c(x,y,adonis)
.beta@temp = temp
.beta@meta = tibble::as_tibble(pcoa_result)
} else if (type == 'nmds'){
capture.output(df_nmds <-  vegan::metaMDS(dist, k = 3))
stress = df_nmds$stress
nmds_points = as.data.frame(df_nmds$points)
names(nmds_points)[1:2] <- c('NMDS1', 'NMDS2')
inter = intersect(rownames(meta), rownames(nmds_points))
meta = meta[inter,]
nmds_points = nmds_points[inter,]
nmds_result = cbind(meta, nmds_points)
adonis = paste('Stress=',round(stress, 3))
.beta@temp = adonis
.beta@meta = tibble::as_tibble(nmds_result)
} else if (type == 'pca'){
pca = prcomp(otu2, ...)
formula_str = paste("otu2~", .group)
formula_obj = as.formula(formula_str)
div = vegan::adonis2(formula_obj, data = meta, permutations = 999, ...)
adonis = paste0("adonis: R2=",round(div$R2,3), "; p=",div$`Pr(>F)`)
pca_points = as.data.frame(pca$x)
inter = intersect(rownames(meta), rownames(pca_points))
meta = meta[inter,]
pca_points = pca_points[inter,]
pca_result = cbind(meta, pca_points)
summ1 = summary(pca)
x = paste0("PC1(",round(summ1$importance[2,1]*100,2),"%)")
y = paste0("PC2(",round(summ1$importance[2,2]*100,2),"%)")
temp = c(x, y , adonis)
.beta@temp = temp
.beta@meta = tibble::as_tibble(pca_result)
} else{
stop("type should be one of 'pcoa', 'nmds' and 'pca'")
}
}
pair_adonis = pairwiseAdonis::pairwise.adonis(x=otu2, factors = meta[[.group]], sim.function = "vegdist",
sim.method = method, p.adjust = "BH", reduce = NULL, perm = 999)
.beta@result = tibble::as_tibble(pair_adonis)
return(.beta)
}
pca = calc_beta(hehe, pca, con_crop, method = "bray")
pcoa = calc_beta(hehe, pcoa, con_crop, method = "bray")
nmds = calc_beta(hehe, nmds, con_crop, method = "bray")
setGeneric("nem_plot", function(object,...){
standardGeneric("nem_plot")
})
setMethod("nem_plot", signature("beta"), function(object, level = 0, type = 1){
# object = pca
my_color <- c("#4f72d2","#E64B35","#4DBBD5","#F2A900","#00A087","#3C5488",
"#F39B7F","#0096b0","#DC0000","#c06e26",
"#b5426a")
meta = object@meta
result = object@result
temp = object@temp
if (length(result) == 1){
NMDS1 = meta[,3]
NMDS2 = meta[,4]
group = meta[,2]
p = ggplot2::ggplot(meta,aes(x=NMDS1,y=NMDS2,color=!!sym(colnames(group))))+
ggplot2::labs(x=colnames(NMDS1),y = colnames(NMDS2), title=temp)+geom_point(size=4)+
ggplot2::scale_color_manual(values = my_color)+
ggplot2::theme(legend.title = ggplot2::element_blank())+
ggplot2::theme_test() + ggplot2::coord_fixed(1)
} else {
PCoA1 = meta[,3]
PCoA2 = meta[,4]
group = meta[,2]
if (colnames(PCoA1)=="PCoA1"){
p = ggplot2::ggplot(meta,aes(x=PCoA1,y=PCoA2,color=!!sym(colnames(group))))
} else {
p = ggplot2::ggplot(meta,aes(x=PC1,y=PC2,color=!!sym(colnames(group))))
}
p = p+ggplot2::labs(x = temp[1], y=temp[2], title=temp[3])+geom_point(size=4)+
ggplot2::scale_color_manual(values = my_color)+
ggplot2::theme(legend.title = ggplot2::element_blank())+
ggplot2::theme_test() + ggplot2::coord_fixed(1)
if (level > 0){
if (type == 1){
p = p+ggplot2::stat_ellipse(level=level)
} else if(type == 2){
p = p+ggalt::geom_encircle(aes(fill=group), alpha = 0.1, show.legend = F)
} else {
stop("Type value must be 1 or 2.")
}
} else if (level == 0){
p
} else {
stop("Invalid level value.")
}
}
})
p = nem_plot(pcoa)
p
p = nem_plot(nmds)
p
p = nem_plot(pca)
p
nmds@temp
setGeneric("nem_plot", function(object,...){
standardGeneric("nem_plot")
})
setMethod("nem_plot", signature("beta"), function(object, level = 0, type = 1){
# object = pca
my_color <- c("#4f72d2","#E64B35","#4DBBD5","#F2A900","#00A087","#3C5488",
"#F39B7F","#0096b0","#DC0000","#c06e26",
"#b5426a")
meta = object@meta
result = object@result
temp = object@temp
if (length(temp) == 1){
NMDS1 = meta[,3]
NMDS2 = meta[,4]
group = meta[,2]
p = ggplot2::ggplot(meta,aes(x=NMDS1,y=NMDS2,color=!!sym(colnames(group))))+
ggplot2::labs(x=colnames(NMDS1),y = colnames(NMDS2), title=temp)+geom_point(size=4)+
ggplot2::scale_color_manual(values = my_color)+
ggplot2::theme(legend.title = ggplot2::element_blank())+
ggplot2::theme_test() + ggplot2::coord_fixed(1)
} else {
PCoA1 = meta[,3]
PCoA2 = meta[,4]
group = meta[,2]
if (colnames(PCoA1)=="PCoA1"){
p = ggplot2::ggplot(meta,aes(x=PCoA1,y=PCoA2,color=!!sym(colnames(group))))
} else {
p = ggplot2::ggplot(meta,aes(x=PC1,y=PC2,color=!!sym(colnames(group))))
}
p = p+ggplot2::labs(x = temp[1], y=temp[2], title=temp[3])+geom_point(size=4)+
ggplot2::scale_color_manual(values = my_color)+
ggplot2::theme(legend.title = ggplot2::element_blank())+
ggplot2::theme_test() + ggplot2::coord_fixed(1)
if (level > 0){
if (type == 1){
p = p+ggplot2::stat_ellipse(level=level)
} else if(type == 2){
p = p+ggalt::geom_encircle(aes(fill=group), alpha = 0.1, show.legend = F)
} else {
stop("Type value must be 1 or 2.")
}
} else if (level == 0){
p
} else {
stop("Invalid level value.")
}
}
})
p = nem_plot(pcoa)
p
p = nem_plot(nmds)
p
p = nem_plot(pca)
p
p = nem_plot(pcoa,level = 0.6)
p
p = nem_plot(nmds,type = 2)
p
setGeneric("nem_plot", function(object,...){
standardGeneric("nem_plot")
})
setMethod("nem_plot", signature("beta"), function(object, level = 0, type = 1){
# object = pca
my_color <- c("#4f72d2","#E64B35","#4DBBD5","#F2A900","#00A087","#3C5488",
"#F39B7F","#0096b0","#DC0000","#c06e26",
"#b5426a")
meta = object@meta
result = object@result
temp = object@temp
if (length(temp) == 1){
NMDS1 = meta[,3]
NMDS2 = meta[,4]
group = meta[,2]
p = ggplot2::ggplot(meta,aes(x=NMDS1,y=NMDS2,color=!!sym(colnames(group))))+
ggplot2::labs(x=colnames(NMDS1),y = colnames(NMDS2), title=temp)+geom_point(size=4)+
ggplot2::scale_color_manual(values = my_color)+
ggplot2::theme(legend.title = ggplot2::element_blank())+
ggplot2::theme_test() + ggplot2::coord_fixed(1)
if (level > 0){
if (type == 1){
p = p+ggplot2::stat_ellipse(level=level)
} else if(type == 2){
p = p+ggalt::geom_encircle(aes(fill=group), alpha = 0.1, show.legend = F)
} else {
stop("Type value must be 1 or 2.")
}
} else if (level == 0){
p
} else {
stop("Invalid level value.")
}
} else {
PCoA1 = meta[,3]
PCoA2 = meta[,4]
group = meta[,2]
if (colnames(PCoA1)=="PCoA1"){
p = ggplot2::ggplot(meta,aes(x=PCoA1,y=PCoA2,color=!!sym(colnames(group))))
} else {
p = ggplot2::ggplot(meta,aes(x=PC1,y=PC2,color=!!sym(colnames(group))))
}
p = p+ggplot2::labs(x = temp[1], y=temp[2], title=temp[3])+geom_point(size=4)+
ggplot2::scale_color_manual(values = my_color)+
ggplot2::theme(legend.title = ggplot2::element_blank())+
ggplot2::theme_test() + ggplot2::coord_fixed(1)
if (level > 0){
if (type == 1){
p = p+ggplot2::stat_ellipse(level=level)
} else if(type == 2){
p = p+ggalt::geom_encircle(aes(fill=group), alpha = 0.1, show.legend = F)
} else {
stop("Type value must be 1 or 2.")
}
} else if (level == 0){
p
} else {
stop("Invalid level value.")
}
}
})
p = nem_plot(nmds,type = 2)
p
p = nem_plot(pcoa,type = 2)
p
setGeneric("nem_plot", function(object,...){
standardGeneric("nem_plot")
})
setMethod("nem_plot", signature("beta"), function(object, level = 0, type = 1){
# object = pca
my_color <- c("#4f72d2","#E64B35","#4DBBD5","#F2A900","#00A087","#3C5488",
"#F39B7F","#0096b0","#DC0000","#c06e26",
"#b5426a")
meta = object@meta
result = object@result
temp = object@temp
if (length(temp) == 1){
NMDS1 = meta[,3]
NMDS2 = meta[,4]
group = meta[,2]
p = ggplot2::ggplot(meta,aes(x=NMDS1,y=NMDS2,color=!!sym(colnames(group))))+
ggplot2::labs(x=colnames(NMDS1),y = colnames(NMDS2), title=temp)+geom_point(size=4)+
ggplot2::scale_color_manual(values = my_color)+
ggplot2::theme(legend.title = ggplot2::element_blank())+
ggplot2::theme_test() + ggplot2::coord_fixed(1)
if (level > 0){
if (type == 1){
p = p+ggplot2::stat_ellipse(level=level)
} else if(type == 2){
p = p+ggalt::geom_encircle(aes(fill=!!sym(colnames(group))), alpha = 0.1, show.legend = F)
} else {
stop("Type value must be 1 or 2.")
}
} else if (level == 0){
p
} else {
stop("Invalid level value.")
}
} else {
PCoA1 = meta[,3]
PCoA2 = meta[,4]
group = meta[,2]
if (colnames(PCoA1)=="PCoA1"){
p = ggplot2::ggplot(meta,aes(x=PCoA1,y=PCoA2,color=!!sym(colnames(group))))
} else {
p = ggplot2::ggplot(meta,aes(x=PC1,y=PC2,color=!!sym(colnames(group))))
}
p = p+ggplot2::labs(x = temp[1], y=temp[2], title=temp[3])+geom_point(size=4)+
ggplot2::scale_color_manual(values = my_color)+
ggplot2::theme(legend.title = ggplot2::element_blank())+
ggplot2::theme_test() + ggplot2::coord_fixed(1)
if (level > 0){
if (type == 1){
p = p+ggplot2::stat_ellipse(level=level)
} else if(type == 2){
p = p+ggalt::geom_encircle(aes(fill=!!sym(colnames(group))), alpha = 0.1, show.legend = F)
} else {
stop("Type value must be 1 or 2.")
}
} else if (level == 0){
p
} else {
stop("Invalid level value.")
}
}
})
p = nem_plot(pcoa,level = 0.6,type = 2)
p
setGeneric("nem_plot", function(object,...){
standardGeneric("nem_plot")
})
setMethod("nem_plot", signature("beta"), function(object, level = 0.6, type = 1){
# object = pca
my_color <- c("#4f72d2","#E64B35","#4DBBD5","#F2A900","#00A087","#3C5488",
"#F39B7F","#0096b0","#DC0000","#c06e26",
"#b5426a")
meta = object@meta
result = object@result
temp = object@temp
if (length(temp) == 1){
NMDS1 = meta[,3]
NMDS2 = meta[,4]
group = meta[,2]
p = ggplot2::ggplot(meta,aes(x=NMDS1,y=NMDS2,color=!!sym(colnames(group))))+
ggplot2::labs(x=colnames(NMDS1),y = colnames(NMDS2), title=temp)+geom_point(size=4)+
ggplot2::scale_color_manual(values = my_color)+
ggplot2::theme(legend.title = ggplot2::element_blank())+
ggplot2::theme_test() + ggplot2::coord_fixed(1)
if (level > 0){
if (type == 1){
p = p+ggplot2::stat_ellipse(level=level)
} else if(type == 2){
p = p+ggalt::geom_encircle(aes(fill=!!sym(colnames(group))), alpha = 0.1, show.legend = F)
} else {
stop("Type value must be 1 or 2.")
}
} else if (level == 0){
p
} else {
stop("Invalid level value.")
}
} else {
PCoA1 = meta[,3]
PCoA2 = meta[,4]
group = meta[,2]
if (colnames(PCoA1)=="PCoA1"){
p = ggplot2::ggplot(meta,aes(x=PCoA1,y=PCoA2,color=!!sym(colnames(group))))
} else {
p = ggplot2::ggplot(meta,aes(x=PC1,y=PC2,color=!!sym(colnames(group))))
}
p = p+ggplot2::labs(x = temp[1], y=temp[2], title=temp[3])+geom_point(size=4)+
ggplot2::scale_color_manual(values = my_color)+
ggplot2::theme(legend.title = ggplot2::element_blank())+
ggplot2::theme_test() + ggplot2::coord_fixed(1)
if (level > 0){
if (type == 1){
p = p+ggplot2::stat_ellipse(level=level)
} else if(type == 2){
p = p+ggalt::geom_encircle(aes(fill=!!sym(colnames(group))), alpha = 0.1, show.legend = F)
} else {
stop("Type value must be 1 or 2.")
}
} else if (level == 0){
p
} else {
stop("Invalid level value.")
}
}
})
p = nem_plot(pcoa,level = 0.6)
p
p = nem_plot(pcoa,type = 2)
p
p = nem_plot(nmds,type = 2)
p
p = nem_plot(pca)
p
?ggalt
load("C:/Users/whkyg/Desktop/BaiduSyncdisk/easynem/R/sysdata.rda")
