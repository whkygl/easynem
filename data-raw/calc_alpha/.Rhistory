devtools::install_github("whkygl/easynem")
# devtools::install_github("whkygl/easynem")
library(easynem)
bac <- read_nem(tab = easynem_example("bacotu.csv"),
tax = easynem_example("bactax.csv"),
meta = easynem_example("meta.csv"))
setClass(
"alpha",
contains = "easynem",
representation(result = "data.frame")
)
setMethod(
"show",
"alpha",
function(object) {
cat("The alpha diversity of each treatment result is:\n")
print(object@result)
}
)
?representation
# devtools::install_github("whkygl/easynem")
library(easynem)
bac <- read_nem(tab = easynem_example("bacotu.csv"),
tax = easynem_example("bactax.csv"),
meta = easynem_example("meta.csv"))
methods::setClass(
"alpha",
contains = "easynem",
methods::representation(result = "data.frame")
)
methods::setMethod(
"show",
"alpha",
function(object) {
cat("The alpha diversity of each treatment result is:\n")
print(object@result)
}
)
?cat
class(alpha)
data = bac
# data = bac
alpha = methods::new("alpha")
class(alpha)
View(alpha)
alpha@meta = data@
}
alpha@meta = data@meta
alpha@meta
data@tab
data@meta
?sapply
results = data@meta[, !sapply(data@meta, is.character)]
results
results = data@meta[, sapply(data@meta, is.character)]
results
View(results)
?is.character
# devtools::install_github("whkygl/easynem")
library(easynem)
bac <- read_nem(tab = easynem_example("bacotu.csv"),
tax = easynem_example("bactax.csv"),
meta = easynem_example("meta.csv"))
methods::setClass(
"alpha",
contains = "easynem",
methods::representation(result = "data.frame")
)
methods::setMethod(
"show",
"alpha",
function(object) {
cat("The alpha diversity of each treatment result is:\n")
print(object@result)
}
)
data = bac
# data = bac
alpha = methods::new("alpha")
class(alpha)
class(bac)
str(alpha)
alpha@contains
getclass(alpha)
??getclass
methods::getclass(alpha)
methods::findClass(alpha)
View(alpha)
alpha@meta = data@meta
alpha@tax = data@tax
alpha@tab = data@tab
results = data@meta[, sapply(data@meta, is.character)]
View(alpha)
View(alpha)
hehe <- calc_compare2(alpha, con_crop, season, pH, method = HSD2)
hehe
class(hehe)
hehe@temp
class(hehe)
class(alpha)
hehe <- alpha |> filter_name(meta, con_crop %in% c("Y2","Y11"))
hehe
hehe@meta
# devtools::install_github("whkygl/easynem")
library(easynem)
bac <- read_nem(tab = easynem_example("bacotu.csv"),
tax = easynem_example("bactax.csv"),
meta = easynem_example("meta.csv"))
methods::setClass(
"alpha",
contains = "easynem",
methods::representation(result = "data.frame")
)
methods::setMethod(
"show",
"alpha",
function(object) {
cat("The alpha diversity of each treatment result is:\n")
print(object@result)
}
)
data = bac
# data = bac
alpha = methods::new("alpha")
alpha@meta = data@meta
alpha@tax = data@tax
alpha@tab = data@tab
results = data@meta[, sapply(data@meta, is.character)]
results
tab_t = t(alpha@tab)
View(tab_t)
alpha@tab
tab = alpha@tab
View(tab)
rownames(tab) = tab[,1]
tab = as.data.frame(alpha@tab)
rownames(tab) = tab[,1]
View(tab)
tab = tab[,-1]
View(tab)
tab_t = t(tab)
View(tab_t)
?vegan::diversity
shannon = vegan::diversity(tab_t, "shannon")
shannon
simpson = vegan::diversity(tab_t, "simpson")
simpson
invsimpson = vegan::diversity(tab_t, "invsimpson", ...)
invsimpson = vegan::diversity(tab_t, "invsimpson")
invsimpson
?vegan::specnumber
Shannon = vegan::diversity(tab_t, "shannon", ...)
Simpson = vegan::diversity(tab_t, "simpson", ...)
Invsimpson = vegan::diversity(tab_t, "invsimpson", ...)
Shannon = vegan::diversity(tab_t, "shannon")
Simpson = vegan::diversity(tab_t, "simpson")
Invsimpson = vegan::diversity(tab_t, "invsimpson")
UnbiasedSimpson = vegan::simpson.unb(tab_t)
UnbiasedSimpson
FihserAlpha = vegan::fisher.alpha(tab_t)
SpeciesAlpha = vegan::specnumber(tab_t)
SpeciesAlpha
View(tab_t)
rowSums(tab_t)
SpeciesNumber = vegan::specnumber(tab_t)
PielouEvenness = Shannon/log(SpeciesNumber)
PielouEvenness
GenericRichness = (SpeciesNumber-1)/log(rowSums(tab_t))
GenericRichness
?vegan::estimateR
result1 = vegan::estimateR(tab_t)
View(result1)
result1 = t(result1)
?t
View(result1)
result1 = t(result1)[,c(2,4)]
View(result1)
result1 = vegan::estimateR(tab_t)
result1 = t(result1)
View(result1)
result1 = result1[,c(2,4)]
View(result1)
View(result1)
colnames(result1) = c("Chao1", "ACE")
View(result1)
result1$Shannon = Shannon
View(result1)
result1 = vegan::estimateR(tab_t)
result1 = t(result1)
result1 = result1[,c(2,4)]
colnames(result1) = c("Chao1", "ACE")
result1 = as.data.frame(result1)
View(result1)
result1$Shannon = Shannon
View(result1)
result1$Simpson = Simpson
result1$Invsimpson = Invsimpson
result1$UnbiasedSimpson = UnbiasedSimpson
result1$FihserAlpha = FihserAlpha
result1$SpeciesNumber = SpeciesNumber
result1$PielouEvenness = PielouEvenness
result1$GenericRichness = GenericRichness
View(result1)
results
result1$SampleID = rownames(result1)
?merge
results = merge(results, result1, by = "SampleID")
View(results)
# devtools::install_github("whkygl/easynem")
library(easynem)
bac <- read_nem(tab = easynem_example("bacotu.csv"),
tax = easynem_example("bactax.csv"),
meta = easynem_example("meta.csv"))
methods::setClass(
"alpha",
contains = "easynem",
methods::representation(result = "data.frame")
)
methods::setMethod(
"show",
"alpha",
function(object) {
cat("The alpha diversity of each treatment result is:\n")
print(object@result)
}
)
calc_apha <- function(data, ...){
# data = bac
alpha = methods::new("alpha")
alpha@meta = data@meta
alpha@tax = data@tax
alpha@tab = data@tab
results = data@meta[, sapply(data@meta, is.character)]
tab = as.data.frame(alpha@tab)
rownames(tab) = tab[,1]
tab = tab[,-1]
tab_t = t(tab)
Shannon = vegan::diversity(tab_t, "shannon", ...)
Simpson = vegan::diversity(tab_t, "simpson", ...)
Invsimpson = vegan::diversity(tab_t, "invsimpson", ...)
UnbiasedSimpson = vegan::simpson.unb(tab_t, ...)
FihserAlpha = vegan::fisher.alpha(tab_t, ...)
SpeciesNumber = vegan::specnumber(tab_t, ...)
PielouEvenness = Shannon/log(SpeciesNumber)
GenericRichness = (SpeciesNumber-1)/log(rowSums(tab_t))
result1 = vegan::estimateR(tab_t, ...)
result1 = t(result1)
result1 = result1[,c(2,4)]
colnames(result1) = c("Chao1", "ACE")
result1 = as.data.frame(result1)
result1$Shannon = Shannon
result1$Simpson = Simpson
result1$Invsimpson = Invsimpson
result1$UnbiasedSimpson = UnbiasedSimpson
result1$FihserAlpha = FihserAlpha
result1$SpeciesNumber = SpeciesNumber
result1$PielouEvenness = PielouEvenness
result1$GenericRichness = GenericRichness
result1$SampleID = rownames(result1)
results = merge(results, result1, by = "SampleID")
alpha@result = results
return(alpha)
}
hehe <- bac |> calc_apha()
hehe
results = tibble::as.tibble(results)
calc_apha <- function(data, ...){
# data = bac
alpha = methods::new("alpha")
alpha@meta = data@meta
alpha@tax = data@tax
alpha@tab = data@tab
results = data@meta[, sapply(data@meta, is.character)]
tab = as.data.frame(alpha@tab)
rownames(tab) = tab[,1]
tab = tab[,-1]
tab_t = t(tab)
Shannon = vegan::diversity(tab_t, "shannon", ...)
Simpson = vegan::diversity(tab_t, "simpson", ...)
Invsimpson = vegan::diversity(tab_t, "invsimpson", ...)
UnbiasedSimpson = vegan::simpson.unb(tab_t, ...)
FihserAlpha = vegan::fisher.alpha(tab_t, ...)
SpeciesNumber = vegan::specnumber(tab_t, ...)
PielouEvenness = Shannon/log(SpeciesNumber)
GenericRichness = (SpeciesNumber-1)/log(rowSums(tab_t))
result1 = vegan::estimateR(tab_t, ...)
result1 = t(result1)
result1 = result1[,c(2,4)]
colnames(result1) = c("Chao1", "ACE")
result1 = as.data.frame(result1)
result1$Shannon = Shannon
result1$Simpson = Simpson
result1$Invsimpson = Invsimpson
result1$UnbiasedSimpson = UnbiasedSimpson
result1$FihserAlpha = FihserAlpha
result1$SpeciesNumber = SpeciesNumber
result1$PielouEvenness = PielouEvenness
result1$GenericRichness = GenericRichness
result1$SampleID = rownames(result1)
results = merge(results, result1, by = "SampleID")
results = tibble::as_tibble(results)
alpha@result = results
return(alpha)
}
hehe <- bac |> calc_apha()
hehe
# devtools::install_github("whkygl/easynem")
library(easynem)
bac <- read_nem(tab = easynem_example("bacotu.csv"),
tax = easynem_example("bactax.csv"),
meta = easynem_example("meta.csv"))
methods::setClass(
"alpha",
contains = "easynem",
methods::representation(result = "data.frame")
)
methods::setMethod(
"show",
"alpha",
function(object) {
cat("The alpha diversity of each treatment result is:\n")
print(object@result)
}
)
# data = bac
alpha = methods::new("alpha")
alpha@meta = data@meta
alpha@tax = data@tax
data = bac
data = bac
# data = bac
alpha = methods::new("alpha")
alpha@meta = data@meta
alpha@tax = data@tax
alpha@tab = data@tab
results = data@meta[, sapply(data@meta, is.character)]
tab = as.data.frame(alpha@tab)
rownames(tab) = tab[,1]
tab = tab[,-1]
tab_t = t(tab)
Shannon = vegan::diversity(tab_t, "shannon", ...)
Simpson = vegan::diversity(tab_t, "simpson", ...)
Invsimpson = vegan::diversity(tab_t, "invsimpson", ...)
UnbiasedSimpson = vegan::simpson.unb(tab_t, ...)
FihserAlpha = vegan::fisher.alpha(tab_t, ...)
SpeciesNumber = vegan::specnumber(tab_t, ...)
PielouEvenness = Shannon/log(SpeciesNumber)
GenericRichness = (SpeciesNumber-1)/log(rowSums(tab_t))
result1 = vegan::estimateR(tab_t, ...)
result1 = t(result1)
result1 = result1[,c(2,4)]
colnames(result1) = c("Chao1", "ACE")
result1 = as.data.frame(result1)
result1$Shannon = Shannon
result1$Simpson = Simpson
result1$Invsimpson = Invsimpson
result1$UnbiasedSimpson = UnbiasedSimpson
result1$FihserAlpha = FihserAlpha
result1$SpeciesNumber = SpeciesNumber
result1$PielouEvenness = PielouEvenness
result1$GenericRichness = GenericRichness
result1$SampleID = rownames(result1)
result1
# devtools::install_github("whkygl/easynem")
library(easynem)
bac <- read_nem(tab = easynem_example("bacotu.csv"),
tax = easynem_example("bactax.csv"),
meta = easynem_example("meta.csv"))
methods::setClass(
"alpha",
contains = "easynem",
methods::representation(result = "data.frame")
)
methods::setMethod(
"show",
"alpha",
function(object) {
cat("The alpha diversity of each treatment result is:\n")
print(object@result)
}
)
data = bac
# data = bac
alpha = methods::new("alpha")
alpha@meta = data@meta
alpha@tax = data@tax
alpha@tab = data@tab
results = data@meta[, sapply(data@meta, is.character)]
tab = as.data.frame(alpha@tab)
rownames(tab) = tab[,1]
tab = tab[,-1]
tab_t = t(tab)
Shannon = vegan::diversity(tab_t, "shannon", ...)
Shannon = vegan::diversity(tab_t, "shannon")
Simpson = vegan::diversity(tab_t, "simpson")
Invsimpson = vegan::diversity(tab_t, "invsimpson")
UnbiasedSimpson = vegan::simpson.unb(tab_t)
FihserAlpha = vegan::fisher.alpha(tab_t)
SpeciesNumber = vegan::specnumber(tab_t)
PielouEvenness = Shannon/log(SpeciesNumber)
GenericRichness = (SpeciesNumber-1)/log(rowSums(tab_t))
result1 = vegan::estimateR(tab_t)
result1 = t(result1)
result1 = result1[,c(2,4)]
colnames(result1) = c("Chao1", "ACE")
result1 = as.data.frame(result1)
result1$Shannon = Shannon
result1$Simpson = Simpson
result1$Invsimpson = Invsimpson
result1$UnbiasedSimpson = UnbiasedSimpson
result1$FihserAlpha = FihserAlpha
result1$SpeciesNumber = SpeciesNumber
result1$PielouEvenness = PielouEvenness
result1$GenericRichness = GenericRichness
result1$SampleID = rownames(result1)
alpha@meta
meta = merge(alpha@meta, result1, by = "SampleID")
meta
meta = tibble::as_tibble(merge(alpha@meta, result1, by = "SampleID"))
meta
alpha@meta
