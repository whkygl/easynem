meta = meta[,c(1, which(names(meta) %in% c(.group1, .group2, y)))]
row.names(meta) = meta[,1]
results = meta |> dplyr::group_by(!!rlang::sym(colnames(meta)[3])) |> dplyr::summarise(t_test_result = list(with(meta, t.test(get(y)[get(.group1) == unique(meta[[.group1]])[1]],get(y)[get(.group1) == unique(meta[[.group1]])[2]], paired = TRUE)))) |> dplyr::ungroup()
results
results$t_test_result
with(meta, t.test(get(y)[get(.group1) == unique(meta[[.group1]])[1]],get(y)[get(.group1) == unique(meta[[.group1]])[2]], paired = TRUE, ...))
with(meta, t.test(get(y)[get(.group1) == unique(meta[[.group1]])[1]],get(y)[get(.group1) == unique(meta[[.group1]])[2]], paired = TRUE))
results = meta |> dplyr::group_by(!!rlang::sym(colnames(meta)[3])) |> dplyr::summarise(t_test_result = list(with(t.test(get(y)[get(.group1) == unique(meta[[.group1]])[1]],get(y)[get(.group1) == unique(meta[[.group1]])[2]], paired = TRUE)))) |> dplyr::ungroup()
# 加载必要的包
library(dplyr)
library(broom)
# 创建示例数据框
df <- data.frame(
group = rep(c("A", "B"), each = 10),
value1 = c(rnorm(10, mean = 5), rnorm(10, mean = 7)),
value2 = c(rnorm(10, mean = 6), rnorm(10, mean = 8))
)
# 按group分组，并在每个分组上应用t.test
result <- df %>%
group_by(group) %>%
do(tidy(t.test(.$value1, .$value2)))
# 查看结果
print(result)
View(df)
bac@meta
meta
meta[,-1]
write.csv(meta,"hehe.csv")
# 加载必要的包
library(dplyr)
library(tidyr)
# 读取CSV文件
df <- read.csv("hehe.csv")
View(df)
# 重塑数据框
df_wide <- df %>%
pivot_wider(names_from = con_crop, values_from = pH, names_prefix = "Y")
df_wide
# 加载必要的包
library(dplyr)
library(tidyr)
# 读取CSV文件
df <- read.csv("hehe.csv")
View(df)
# 查看t检验结果
print(results)
# 加载必要的包
library(dplyr)
library(tidyr)
# 读取CSV文件
df <- read.csv("hehe.csv")
# 重塑数据框
df_wide <- df %>%
pivot_wider(names_from = con_crop, values_from = pH, names_prefix = "pH")
# 查看结果
print(df_wide)
df_wide$Y11
df_wide$pHY11
df
df_wide <- df %>% as.data.frame.table() %>% dcast(con_crop+season~pH, value = c("pH_Y11", "pH_Y2"))
??dcast
library(tidyverse)
library(reshape2)
df_wide <- df %>% as.data.frame.table() %>% dcast(con_crop+season~pH, value = c("pH_Y11", "pH_Y2"))
df
df_wide <- df %>% as.data.frame.table() %>% dcast(season~pH, value = c("pH_Y11", "pH_Y2"))
df_wide <- df %>% dcast(season~pH, value = c("pH_Y11", "pH_Y2"))
df_wide
df_wide <- df %>% dcast(con_crop+season~pH, value = c("pH_Y11", "pH_Y2"))
df_wide
# 加载必要的包
library(dplyr)
library(tidyr)
# 读取CSV文件
df <- read.csv("hehe.csv")
# 添加唯一标识符以避免pivot_wider时的数据聚合
df <- df %>%
group_by(season, con_crop) %>%
mutate(id = row_number()) %>%
ungroup()
df
# 重塑数据框，保持season列不动
df_wide <- df %>%
pivot_wider(names_from = con_crop, values_from = pH, names_prefix = "Y") %>%
select(-id)  # 删除辅助列
df_wide
# 加载必要的包
library(dplyr)
library(tidyr)
# 读取CSV文件
df <- read.csv("hehe.csv")
df
meta
TTest2 <- function(data, .group1, .group2, y, paired = FALSE, ...){
# data = hehe
# .group1 = "con_crop"
# .group2 = "season"
# y = "pH"
.compare2 = methods::new("compare2")
meta = as.data.frame(data@meta)
meta = meta[,c(1, which(names(meta) %in% c(.group1, .group2, y)))]
if (paired == FALSE) {
formula_str = paste(y, "~", colnames(meta)[2])
results = meta |> dplyr::group_by(!!rlang::sym(colnames(meta)[3])) |> dplyr::summarise(t_test_result = list(t.test(stats::as.formula(formula_str), ...))) |> dplyr::ungroup()
results <- results |> dplyr::mutate(p_value = sapply(t_test_result, function(x) x$p.value))
for (i in 1:nrow(results)){
names(results$t_test_result)[i] = results[i,1]
}
} else if (paired == TRUE) {
with(meta, t.test(get(y)[get(.group1) == unique(meta[[.group1]])[1]],get(y)[get(.group1) == unique(meta[[.group1]])[2]], paired = TRUE, ...))
results = meta |> dplyr::group_by(!!rlang::sym(colnames(meta)[3])) |> dplyr::summarise(t_test_result = list(with(meta, t.test(get(y)[get(.group1) == unique(meta[[.group1]])[1]],get(y)[get(.group1) == unique(meta[[.group1]])[2]], paired = TRUE, ...)))) |> dplyr::ungroup()
results <- results |> dplyr::mutate(p_value = sapply(t_test_result, function(x) x$p.value))
for (i in 1:nrow(results)){
names(results$t_test_result)[i] = results[i,1]
}
}
.compare2@result = results$t_test_result
.compare2@meta = meta
.compare2@temp = c("TTest2")
return(.compare2)
}
hehe <- bac |> filter_name(meta, con_crop %in% c("Y2","Y11")) |> calc_compare2(.group1 = con_crop, .group2 = season, y = pH, method = TTest2)
hehe
data = hehe
.group1 = "con_crop"
.group2 = "season"
y = "pH"
# data = hehe
# .group1 = "con_crop"
# .group2 = "season"
# y = "pH"
.compare2 = methods::new("compare2")
meta = as.data.frame(data@meta)
meta = meta[,c(1, which(names(meta) %in% c(.group1, .group2, y)))]
meta
?group_by
meta
?row_number
?pivot_wider
?select
meta
meta = meta[,-1]
meta = meta |>
dplyr::group_by(!!rlang::sym(.group2), !!rlang::sym(.group1)) |>
dplyr::mutate(id = dplyr::row_number()) |>
dplyr::ungroup()
meta
meta_wide <- meta |>
tidyr::pivot_wider(names_from = !!rlang::sym(.group1), values_from = !!rlang::sym(y), names_prefix = !!rlang::sym(y)) |>
dplyr::select(-id)  # 删除辅助列
y
meta_wide <- meta |>
tidyr::pivot_wider(names_from = !!rlang::sym(.group1), values_from = !!rlang::sym(y), names_prefix = y) |>
dplyr::select(-id)  # 删除辅助列
meta_wide
meta_wide <- meta |>
tidyr::pivot_wider(names_from = !!rlang::sym(.group1), values_from = !!rlang::sym(y), names_prefix = paste(y,"_")) |>
dplyr::select(-id)  # 删除辅助列
meta_wide
meta_wide <- meta |>
tidyr::pivot_wider(names_from = !!rlang::sym(.group1), values_from = !!rlang::sym(y), names_prefix = paste0(y,"_")) |>
dplyr::select(-id)  # 删除辅助列
meta_wide
?paste0
# 加载必要的包
library(dplyr)
library(broom)
# 创建示例数据框
df <- data.frame(
group = rep(c("A", "B"), each = 10),
value1 = c(rnorm(10, mean = 5), rnorm(10, mean = 7)),
value2 = c(rnorm(10, mean = 6), rnorm(10, mean = 8))
)
# 按group分组，并在每个分组上应用t.test
result <- df %>%
group_by(group) %>%
do(tidy(t.test(.$value1, .$value2)))
# 查看结果
print(result)
View(result)
View(df)
View(df)
?do
?tidy
?t.test
View(df)
meta_wide
result = meta_wide |>
dplyr::group_by(!!rlang::sym(.group2)) |>
dplyr::do(broom::tidy(stats::t.test(.[,2], .[,3])))
result
result = meta_wide |>
dplyr::group_by(!!rlang::sym(.group2)) |>
dplyr::do(broom::tidy(stats::t.test(.[,2], .[,3], paired = TRUE, ...)))
result = meta_wide |>
dplyr::group_by(!!rlang::sym(.group2)) |>
dplyr::do(broom::tidy(stats::t.test(.[,2], .[,3], paired = TRUE)))
result = meta_wide |>
dplyr::group_by(!!rlang::sym(.group2)) |>
dplyr::do(broom::tidy(stats::t.test(.[,2], .[,3])))
result
result = meta_wide |>
dplyr::group_by(!!rlang::sym(.group2)) |>
dplyr::do(broom::tidy(stats::t.test(.[,2], .[,3], paired = T)))
meta[,2]
meta[,3]
meta_wide[,2]
meta_wide[,3]
result = meta_wide |>
dplyr::group_by(!!rlang::sym(.group2)) |>
dplyr::do(broom::tidy(stats::t.test(.[,2], .[,3], paired = TRUE)))
?as.vector
result = meta_wide |>
dplyr::group_by(!!rlang::sym(.group2)) |>
dplyr::do(broom::tidy(stats::t.test(as.vector(.[,2]), as.vector(.[,3]), paired = TRUE)))
result = meta_wide |>
dplyr::group_by(!!rlang::sym(.group2)) |>
dplyr::do(broom::tidy(stats::t.test(.[,2], .[,3])))
result
hehe
result = meta_wide |>
dplyr::group_by(!!rlang::sym(.group2)) %>%
dplyr::do(broom::tidy(stats::t.test(.[,2], .[,3], paired = TRUE)))
rlang::last_trace()
t.test(meta_wide[,2], meta_wide[,3])
t.test(meta_wide[,2], meta_wide[,3],paired = TRUE )
t.test(meta_wide$pH_Y11, meta_wide$pH_Y2,paired = TRUE )
meta_wide$pH_Y11
t.test(as.vector(meta_wide$pH_Y11), as.vector(meta_wide$pH_Y2,paired = TRUE ))
t.test(as.vector(meta_wide[,2]), as.vector(meta_wide[,3]),paired = TRUE)
hehe1 = as.vector(meta_wide[,2])
hehe2 = as.vector(meta_wide[,3])
t.test(hehe1, hehe2,paired = TRUE)
hehe1
hehe1 = as.vector(meta_wide[,2])[1]
hehe1
hehe1 = as.vector(meta_wide[,2])[[1]]
hehe1
?as.vector
result = meta_wide |>
dplyr::group_by(!!rlang::sym(.group2)) |>
dplyr::do(broom::tidy(stats::t.test(as.vector(.[,2])[[1]], as.vector(.[,3])[[1]], paired = TRUE)))
result
library(easynem)
bac <- read_nem(tab = easynem_example("bacotu.csv"),
tax = easynem_example("bactax.csv"),
meta = easynem_example("meta.csv"))
calc_compare2 <- function(data, .group1, .group2, y, method, ...){
.group1 = deparse(substitute(.group1))
.group2 = deparse(substitute(.group2))
y = deparse(substitute(y))
result = method(data, .group1, .group2, y, ...)
return(result)
}
methods::setClass("compare2",
slots = list(
meta = "data.frame",
result = "ANY",
temp = "character"
))
methods::setMethod("show", "compare2", function(object){
cat("This is an compare2 object\n")
cat("The difference comparison is:\n")
print(object@result)
})
TTest2 <- function(data, .group1, .group2, y, paired = FALSE, ...){
.compare2 = methods::new("compare2")
meta = as.data.frame(data@meta)
meta = meta[,c(1, which(names(meta) %in% c(.group1, .group2, y)))]
.compare2@meta = meta
if (paired == FALSE) {
formula_str = paste(y, "~", colnames(meta)[2])
results = meta |>
dplyr::group_by(!!rlang::sym(colnames(meta)[3])) |>
dplyr::summarise(t_test_result = list(t.test(stats::as.formula(formula_str), ...))) |>
dplyr::ungroup()
results <- results |>
dplyr::mutate(p_value = sapply(t_test_result, function(x) x$p.value))
for (i in 1:nrow(results)){
names(results$t_test_result)[i] = results[i,1]
}
.compare2@result = results$t_test_result
} else if (paired == TRUE) {
meta = meta[,-1]
meta = meta |>
dplyr::group_by(!!rlang::sym(.group2), !!rlang::sym(.group1)) |>
dplyr::mutate(id = dplyr::row_number()) |>
dplyr::ungroup()
meta_wide <- meta |>
tidyr::pivot_wider(names_from = !!rlang::sym(.group1), values_from = !!rlang::sym(y), names_prefix = paste0(y,"_")) |>
dplyr::select(-id)
result = meta_wide |>
dplyr::group_by(!!rlang::sym(.group2)) |>
dplyr::do(broom::tidy(stats::t.test(as.vector(.[,2])[[1]], as.vector(.[,3])[[1]], paired = TRUE, ...)))
.compare2@result = result
}
.compare2@temp = c("TTest2")
return(.compare2)
}
hehe <- bac |> filter_name(meta, con_crop %in% c("Y2","Y11")) |> calc_compare2(.group1 = con_crop, .group2 = season, y = pH, method = TTest2)
hehe
hehe <- bac |> filter_name(meta, con_crop %in% c("Y2","Y11")) |> calc_compare2(.group1 = con_crop, .group2 = season, y = pH, method = TTest2, paired = TRUE)
hehe
library(easynem)
bac <- read_nem(tab = easynem_example("bacotu.csv"),
tax = easynem_example("bactax.csv"),
meta = easynem_example("meta.csv"))
calc_compare2 <- function(data, .group1, .group2, y, method, ...){
.group1 = deparse(substitute(.group1))
.group2 = deparse(substitute(.group2))
y = deparse(substitute(y))
result = method(data, .group1, .group2, y, ...)
return(result)
}
methods::setClass("compare2",
slots = list(
meta = "data.frame",
result = "ANY",
temp = "character"
))
methods::setMethod("show", "compare2", function(object){
cat("This is an compare2 object\n")
cat("The difference comparison is:\n")
print(object@result)
})
TTest2 <- function(data, .group1, .group2, y, paired = FALSE, ...){
.compare2 = methods::new("compare2")
meta = as.data.frame(data@meta)
meta = meta[,c(1, which(names(meta) %in% c(.group1, .group2, y)))]
.compare2@meta = meta
meta = meta[,-1]
meta = meta |>
dplyr::group_by(!!rlang::sym(.group2), !!rlang::sym(.group1)) |>
dplyr::mutate(id = dplyr::row_number()) |>
dplyr::ungroup()
meta_wide <- meta |>
tidyr::pivot_wider(names_from = !!rlang::sym(.group1), values_from = !!rlang::sym(y), names_prefix = paste0(y,"_")) |>
dplyr::select(-id)
result = meta_wide |>
dplyr::group_by(!!rlang::sym(.group2)) |>
dplyr::do(broom::tidy(stats::t.test(as.vector(.[,2])[[1]], as.vector(.[,3])[[1]], paired = TRUE, ...)))
.compare2@result = result
.compare2@temp = c("TTest2")
return(.compare2)
}
hehe <- bac |> filter_name(meta, con_crop %in% c("Y2","Y11")) |> calc_compare2(.group1 = con_crop, .group2 = season, y = pH, method = TTest2)
hehe
TTest2 <- function(data, .group1, .group2, y, paired = FALSE, ...){
.compare2 = methods::new("compare2")
meta = as.data.frame(data@meta)
meta = meta[,c(1, which(names(meta) %in% c(.group1, .group2, y)))]
.compare2@meta = meta
meta = meta[,-1]
meta = meta |>
dplyr::group_by(!!rlang::sym(.group2), !!rlang::sym(.group1)) |>
dplyr::mutate(id = dplyr::row_number()) |>
dplyr::ungroup()
meta_wide <- meta |>
tidyr::pivot_wider(names_from = !!rlang::sym(.group1), values_from = !!rlang::sym(y), names_prefix = paste0(y,"_")) |>
dplyr::select(-id)
result = meta_wide |>
dplyr::group_by(!!rlang::sym(.group2)) |>
dplyr::do(broom::tidy(stats::t.test(as.vector(.[,2])[[1]], as.vector(.[,3])[[1]], ...)))
.compare2@result = result
.compare2@temp = c("TTest2")
return(.compare2)
}
hehe <- bac |> filter_name(meta, con_crop %in% c("Y2","Y11")) |> calc_compare2(.group1 = con_crop, .group2 = season, y = pH, method = TTest2)
hehe
hehe <- bac |> filter_name(meta, con_crop %in% c("Y2","Y11")) |> calc_compare2(.group1 = con_crop, .group2 = season, y = pH, method = TTest2, paired = TRUE)
hehe
TTest2 <- function(data, .group1, .group2, y, ...){
.compare2 = methods::new("compare2")
meta = as.data.frame(data@meta)
meta = meta[,c(1, which(names(meta) %in% c(.group1, .group2, y)))]
.compare2@meta = meta
meta = meta[,-1]
meta = meta |>
dplyr::group_by(!!rlang::sym(.group2), !!rlang::sym(.group1)) |>
dplyr::mutate(id = dplyr::row_number()) |>
dplyr::ungroup()
meta_wide <- meta |>
tidyr::pivot_wider(names_from = !!rlang::sym(.group1), values_from = !!rlang::sym(y), names_prefix = paste0(y,"_")) |>
dplyr::select(-id)
result = meta_wide |>
dplyr::group_by(!!rlang::sym(.group2)) |>
dplyr::do(broom::tidy(stats::t.test(as.vector(.[,2])[[1]], as.vector(.[,3])[[1]], ...)))
.compare2@result = result
.compare2@temp = c("TTest2")
return(.compare2)
}
hehe <- bac |> filter_name(meta, con_crop %in% c("Y2","Y11")) |> calc_compare2(.group1 = con_crop, .group2 = season, y = pH, method = TTest2)
hehe
hehe <- bac |> filter_name(meta, con_crop %in% c("Y2","Y11")) |> calc_compare2(.group1 = con_crop, .group2 = season, y = pH, method = TTest2, paired = TRUE)
hehe
?unique
data = bac
meta = as.data.frame(data@meta)
meta = meta[,c(1, which(names(meta) %in% c(.group1, .group2, y)))]
.compare2@meta = meta
meta
meta = meta[,-1]
meta = meta |>
dplyr::group_by(!!rlang::sym(.group2), !!rlang::sym(.group1)) |>
dplyr::mutate(id = dplyr::row_number()) |>
dplyr::ungroup()
meta
meta = as.data.frame(data@meta)
meta = meta[,c(1, which(names(meta) %in% c(.group1, .group2, y)))]
meta
name1 = unique(meta[,2])[1]
name1
name2 = unique(meta[,2])[2]
name2
library(easynem)
bac <- read_nem(tab = easynem_example("bacotu.csv"),
tax = easynem_example("bactax.csv"),
meta = easynem_example("meta.csv"))
calc_compare2 <- function(data, .group1, .group2, y, method, ...){
.group1 = deparse(substitute(.group1))
.group2 = deparse(substitute(.group2))
y = deparse(substitute(y))
result = method(data, .group1, .group2, y, ...)
return(result)
}
methods::setClass("compare2",
slots = list(
meta = "data.frame",
result = "ANY",
temp = "character"
))
methods::setMethod("show", "compare2", function(object){
cat("This is an compare2 object\n")
cat("The difference comparison is:\n")
print(object@result)
})
TTest2 <- function(data, .group1, .group2, y, ...){
.compare2 = methods::new("compare2")
meta = as.data.frame(data@meta)
meta = meta[,c(1, which(names(meta) %in% c(.group1, .group2, y)))]
name1 = unique(meta[,2])[1]
name2 = unique(meta[,2])[2]
.compare2@meta = meta
meta = meta[,-1]
meta = meta |>
dplyr::group_by(!!rlang::sym(.group2), !!rlang::sym(.group1)) |>
dplyr::mutate(id = dplyr::row_number()) |>
dplyr::ungroup()
meta_wide <- meta |>
tidyr::pivot_wider(names_from = !!rlang::sym(.group1), values_from = !!rlang::sym(y), names_prefix = paste0(y,"_")) |>
dplyr::select(-id)
result = meta_wide |>
dplyr::group_by(!!rlang::sym(.group2)) |>
dplyr::do(broom::tidy(stats::t.test(as.vector(.[,2])[[1]], as.vector(.[,3])[[1]], ...)))
result$group = paste0(name1, "-", name2)
.compare2@result = result
.compare2@temp = c("TTest2")
return(.compare2)
}
hehe <- bac |> filter_name(meta, con_crop %in% c("Y2","Y11")) |> calc_compare2(.group1 = con_crop, .group2 = season, y = pH, method = TTest2)
hehe
hehe <- bac |> filter_name(meta, con_crop %in% c("Y2","Y11")) |> calc_compare2(.group1 = con_crop, .group2 = season, y = pH, method = TTest2, paired = TRUE)
hehe
library(easynem)
bac <- read_nem(tab = easynem_example("bacotu.csv"),
tax = easynem_example("bactax.csv"),
meta = easynem_example("meta.csv"))
calc_compare2 <- function(data, .group1, .group2, y, method, ...){
.group1 = deparse(substitute(.group1))
.group2 = deparse(substitute(.group2))
y = deparse(substitute(y))
result = method(data, .group1, .group2, y, ...)
return(result)
}
methods::setClass("compare2",
slots = list(
meta = "data.frame",
result = "ANY",
temp = "character"
))
methods::setMethod("show", "compare2", function(object){
cat("This is an compare2 object\n")
cat("The difference comparison is:\n")
print(object@result)
})
TTest2 <- function(data, .group1, .group2, y, ...){
.compare2 = methods::new("compare2")
meta = as.data.frame(data@meta)
meta = meta[,c(1, which(names(meta) %in% c(.group1, .group2, y)))]
name1 = unique(meta[,2])[1]
name2 = unique(meta[,2])[2]
.compare2@meta = meta
meta = meta[,-1]
meta = meta |>
dplyr::group_by(!!rlang::sym(.group2), !!rlang::sym(.group1)) |>
dplyr::mutate(id = dplyr::row_number()) |>
dplyr::ungroup()
meta_wide <- meta |>
tidyr::pivot_wider(names_from = !!rlang::sym(.group1), values_from = !!rlang::sym(y), names_prefix = paste0(y,"_")) |>
dplyr::select(-id)
result = meta_wide |>
dplyr::group_by(!!rlang::sym(.group2)) |>
dplyr::do(broom::tidy(stats::t.test(as.vector(.[,2])[[1]], as.vector(.[,3])[[1]], ...)))
result$group = paste0(name1, "-", name2)
.compare2@result = result
.compare2@temp = c("TTest2")
return(.compare2)
}
hehe <- bac |> filter_name(meta, con_crop %in% c("Y2","Y11")) |> calc_compare2(.group1 = con_crop, .group2 = season, y = pH, method = TTest2)
hehe
hehe <- bac |> filter_name(meta, con_crop %in% c("Y2","Y11")) |> calc_compare2(.group1 = con_crop, .group2 = season, y = pH, method = TTest2, paired = TRUE)
hehe
