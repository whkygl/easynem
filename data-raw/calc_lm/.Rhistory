# group = "Treatments"
# x = "Chao1"
# y = "TotalBiomass"
group = deparse(substitute(group))
x = deparse(substitute(x))
y = deparse(substitute(y))
.lm = methods::new("lme")
meta = as.data.frame(data@meta)
meta = meta[,c("SampleID", group, x, y)]
formu <- stats::as.formula(paste0(y, " ~ ", x))
fit = stats::lm(formu, data = meta, ...)
.lm@result = summary(fit)
.lm@meta = tibble::as_tibble(meta)
return(.lm)
}
nem_index <- nem_index |>
calc_alpha() |>
calc_nemindex() |>
calc_lm(.group = Treatments,
x = Chao1,
y = TotalBiomass)
#' @export
#' @examples
#' nem <- read_nem2(tab = nemtab, tax = nemtax, meta = nemmeta)
#' nem_index <- nem |>
#'              calc_alpha() |>
#'              calc_nemindex() |>
#'              calc_lm(group = Treatments,
#'                      x = Chao1,
#'                      y = TotalBiomass)
#' nem_index
calc_lm <- function(data, group, x, y, ...){
# data = nem_index
# group = "Treatments"
# x = "Chao1"
# y = "TotalBiomass"
group = deparse(substitute(group))
x = deparse(substitute(x))
y = deparse(substitute(y))
.lm = methods::new("lme")
meta = as.data.frame(data@meta)
meta = meta[,c(names(meta)[1], group, x, y)]
# formu <- stats::as.formula(paste0(y, " ~ ", x))
# fit = stats::lm(formu, data = meta, ...)
# .lm@result = summary(fit)
# .lm@meta = tibble::as_tibble(meta)
# return(.lm)
}
nem_index <- nem_index |>
calc_alpha() |>
calc_nemindex() |>
calc_lm(.group = Treatments,
x = Chao1,
y = TotalBiomass)
#' @export
#' @examples
#' nem <- read_nem2(tab = nemtab, tax = nemtax, meta = nemmeta)
#' nem_index <- nem |>
#'              calc_alpha() |>
#'              calc_nemindex() |>
#'              calc_lm(group = Treatments,
#'                      x = Chao1,
#'                      y = TotalBiomass)
#' nem_index
calc_lm <- function(data, group, x, y, ...){
# data = nem_index
# group = "Treatments"
# x = "Chao1"
# y = "TotalBiomass"
group = deparse(substitute(group))
x = deparse(substitute(x))
y = deparse(substitute(y))
.lm = methods::new("lme")
meta = as.data.frame(data@meta)
meta = meta[,c(names(meta)[1])]
# formu <- stats::as.formula(paste0(y, " ~ ", x))
# fit = stats::lm(formu, data = meta, ...)
# .lm@result = summary(fit)
# .lm@meta = tibble::as_tibble(meta)
# return(.lm)
}
nem_index <- nem_index |>
calc_alpha() |>
calc_nemindex() |>
calc_lm(.group = Treatments,
x = Chao1,
y = TotalBiomass)
clss(meta)
class(meta)
meta = as.data.frame(data@meta)
#' @export
#' @examples
#' nem <- read_nem2(tab = nemtab, tax = nemtax, meta = nemmeta)
#' nem_index <- nem |>
#'              calc_alpha() |>
#'              calc_nemindex() |>
#'              calc_lm(group = Treatments,
#'                      x = Chao1,
#'                      y = TotalBiomass)
#' nem_index
calc_lm <- function(data, group, x, y, ...){
# data = nem_index
# group = "Treatments"
# x = "Chao1"
# y = "TotalBiomass"
group = deparse(substitute(group))
x = deparse(substitute(x))
y = deparse(substitute(y))
.lm = methods::new("lme")
meta = data@meta
meta = meta[,c(names(meta)[1], group, x, y)]
formu <- stats::as.formula(paste0(y, " ~ ", x))
fit = stats::lm(formu, data = meta, ...)
.lm@result = summary(fit)
.lm@meta = tibble::as_tibble(meta)
return(.lm)
}
nem_index <- nem_index |>
calc_alpha() |>
calc_nemindex() |>
calc_lm(.group = Treatments,
x = Chao1,
y = TotalBiomass)
data@meta
#' @export
#' @examples
#' nem <- read_nem2(tab = nemtab, tax = nemtax, meta = nemmeta)
#' nem_index <- nem |>
#'              calc_alpha() |>
#'              calc_nemindex() |>
#'              calc_lm(group = Treatments,
#'                      x = Chao1,
#'                      y = TotalBiomass)
#' nem_index
calc_lm <- function(data, group, x, y, ...){
# data = nem_index
# group = "Treatments"
# x = "Chao1"
# y = "TotalBiomass"
group = deparse(substitute(group))
x = deparse(substitute(x))
y = deparse(substitute(y))
.lm = methods::new("lme")
meta = data@meta
meta = meta[,c(names(meta)[1], group, x, y)]
formu <- stats::as.formula(paste0(y, " ~ ", x))
fit = stats::lm(formu, data = meta, ...)
.lm@result = summary(fit)
.lm@meta = tibble::as_tibble(meta)
return(.lm)
}
nem_index <- nem_index |>
calc_alpha() |>
calc_nemindex() |>
calc_lm(.group = Treatments,
x = Chao1,
y = TotalBiomass)
nem_index <- nem_index |>
calc_alpha() |>
calc_nemindex() |>
calc_lm(.group = Treatments,
x = Chao1,
y = TotalBiomass)
meta = data@meta
meta = meta[,c(names(meta)[1], group, x, y)]
meta
data = nem_index
#' @export
#' @examples
#' nem <- read_nem2(tab = nemtab, tax = nemtax, meta = nemmeta)
#' nem_index <- nem |>
#'              calc_alpha() |>
#'              calc_nemindex() |>
#'              calc_lm(group = Treatments,
#'                      x = Chao1,
#'                      y = TotalBiomass)
#' nem_index
calc_lm <- function(data, group, x, y, ...){
# data = nem_index
# group = "Treatments"
# x = "Chao1"
# y = "TotalBiomass"
group = deparse(substitute(group))
x = deparse(substitute(x))
y = deparse(substitute(y))
.lm = methods::new("lme")
meta = tibble::as_tibble(data@meta)
meta = meta[,c(names(meta)[1], group, x, y)]
formu <- stats::as.formula(paste0(y, " ~ ", x))
fit = stats::lm(formu, data = meta, ...)
.lm@result = summary(fit)
.lm@meta = tibble::as_tibble(meta)
return(.lm)
}
nem_index <- nem_index |>
calc_alpha() |>
calc_nemindex() |>
calc_lm(.group = Treatments,
x = Chao1,
y = TotalBiomass)
nem_index@meta
nem_index
nem_index <- nem |>
calc_alpha() |>
calc_nemindex() |>
calc_lm(group = Treatments,
x = Chao1,
y = TotalBiomass)
#' @export
#' @examples
#' nem <- read_nem2(tab = nemtab, tax = nemtax, meta = nemmeta)
#' nem_index <- nem |>
#'              calc_alpha() |>
#'              calc_nemindex() |>
#'              calc_lm(group = Treatments,
#'                      x = Chao1,
#'                      y = TotalBiomass)
#' nem_index
calc_lm <- function(data, group, x, y, ...){
# data = nem_index
# group = "Treatments"
# x = "Chao1"
# y = "TotalBiomass"
group = deparse(substitute(group))
x = deparse(substitute(x))
y = deparse(substitute(y))
.lm = methods::new("lme")
meta = tibble::as_tibble(data@meta)
meta = meta[,c(names(meta)[1], group, x, y)]
formu <- stats::as.formula(paste0(y, " ~ ", x))
fit = stats::lm(formu, data = meta, ...)
.lm@result = summary(fit)
.lm@meta = tibble::as_tibble(meta)
return(.lm)
}
nem_index <- nem |>
calc_alpha() |>
calc_nemindex() |>
calc_lm(group = Treatments,
x = Chao1,
y = TotalBiomass)
nem_index
nem_index@meta
?lm
nem <- read_nem(tab = easynem_example("nemtab1.csv"),
tax = easynem_example("nemtax1.csv"),
meta = easynem_example("nemmeta1.csv"))
nem <- read_nem(tab = easynem_example("nemtab1.csv"),
tax = easynem_example("nemtax1.csv"),
meta = easynem_example("nemmeta1.csv"))
data = nem
group1 = "con_crop"
group2 = "season"
x = "pH"
y = "Fe"
.lm = methods::new("lme2")
#' The \code{lme2-class} is used to store the results of linear regression analysis.
#'
#' @slot result A data frame for storing the results of linear regression analysis.
#'
#' @seealso
#' The constructor, \code{\link{calc_lm2}}; Visualization function, \code{\link{nem_plot}}.
#'
#' @name lme2-class
#' @rdname lme2-class
#' @exportClass lme2
methods::setClass("lme2",
slots = list(
meta = "data.frame",
result = "ANY"
))
methods::setMethod("show", "lme2", function(object){
cat("This is an lme2 object\n")
cat("The Linear regression analysis results is:\n")
print(object@result)
})
.lm = methods::new("lme2")
meta = tibble::as_tibble(data@meta)
meta = meta[,c(names(meta)[1], group1, group2, x, y)]
meta
write.csv(meta,"meta.csv")
# 加载必要的包
library(dplyr)
# 创建一个空的数据框来存储结果
results <- data.frame(season = character(),
intercept = numeric(),
slope = numeric(),
r_squared = numeric(),
stringsAsFactors = FALSE)
# 按season分组并应用线性回归模型
meta %>%
group_by(season) %>%
do({
model <- lm(Fe ~ pH, data = .)
data.frame(season = unique(.$season),
intercept = coef(model)[1],
slope = coef(model)[2],
r_squared = summary(model)$r.squared)
}) %>%
bind_rows() -> results
# 打印结果
print(results)
# 按season分组并应用线性回归模型
meta |>
group_by(season) |>
do({
model <- lm(Fe ~ pH, data = .)
data.frame(season = unique(.$season),
intercept = coef(model)[1],
slope = coef(model)[2],
r_squared = summary(model)$r.squared)
}) |>
bind_rows() -> results
# 打印结果
print(results)
# 按season分组并应用线性回归模型
meta %>%
group_by(season) %>%
do({
model <- lm(Fe ~ pH, data = .)
result <- list(
season = unique(.$season),
model = model,
intercept = coef(model)[1],
slope = coef(model)[2],
r_squared = summary(model)$r.squared
)
results_list[[as.character(unique(.$season))]] <<- result
data.frame()  # 返回一个空数据框以继续分组操作
})
results_list <- list()
# 按season分组并应用线性回归模型
meta %>%
group_by(season) %>%
do({
model <- lm(Fe ~ pH, data = .)
result <- list(
season = unique(.$season),
model = model,
intercept = coef(model)[1],
slope = coef(model)[2],
r_squared = summary(model)$r.squared
)
results_list[[as.character(unique(.$season))]] <<- result
data.frame()  # 返回一个空数据框以继续分组操作
})
result
summary(fit)
results_list <- list()
# 按season分组并应用线性回归模型
meta %>%
group_by(season) %>%
do({
model <- lm(Fe ~ pH, data = .)
result <- summary(model)
results_list[[as.character(unique(.$season))]] <<- result
data.frame()  # 返回一个空数据框以继续分组操作
})
View(results)
meta
# 按season分组并应用线性回归模型
meta %>%
group_by(season) %>%
do({
model <- lm(Fe ~ pH, data = .)
result <- summary(model)
results_list[[as.character(unique(.$season))]] <<- result
data.frame()  # 返回一个空数据框以继续分组操作
})
View(results_list)
results_list[1]
summary(results_list[1])
results_list
# 按season分组并应用线性回归模型
meta %>%
group_by(season) %>%
do({
model <- lm(Fe ~ pH, data = .)
result <- summary(model)
results_list[[as.character(unique(.$season))]] <- result
# 返回一个空数据框以继续分组操作
})
# 按season分组并应用线性回归模型
meta %>%
group_by(season) %>%
do({
model <- lm(Fe ~ pH, data = .)
result <- summary(model)
results_list[[as.character(unique(.$season))]] <<- result
# 返回一个空数据框以继续分组操作
})
results_list <- list()
# 按season分组并应用线性回归模型
meta %>%
group_by(season) %>%
do({
model <- lm(Fe ~ pH, data = .)
result <- summary(model)
results_list[[as.character(unique(.$season))]] <<- result
data.frame()  # 返回一个空数据框以继续分组操作
})
results_list <- list()
# 按season分组并应用线性回归模型
meta %>%
group_by(season) %>%
do({
model <- lm(Fe ~ pH, data = .)
result <- summary(model)
results_list[[as.character(unique(.$season))]] <- result
data.frame()  # 返回一个空数据框以继续分组操作
})
results_list
rm(results_list)
results_list <- list()
# 按season分组并应用线性回归模型
meta %>%
group_by(season) %>%
do({
model <- lm(Fe ~ pH, data = .)
result <- summary(model)
results_list[[as.character(unique(.$season))]] <- result
data.frame()  # 返回一个空数据框以继续分组操作
})
# 按season分组并应用线性回归模型
meta %>%
group_by(season) %>%
do({
model <- lm(Fe ~ pH, data = .)
result <- summary(model)
results_list[[as.character(unique(.$season))]] <<- result
data.frame()  # 返回一个空数据框以继续分组操作
})
meta$season
meta[["season"]]
#' \code{\link{calc_funguild}}, \code{\link{calc_funguild2}}, \code{\link{calc_mf2}},
#' \code{\link{calc_mf}}, \code{\link{calc_ter2}}, \code{\link{calc_ef}},
#' \code{\link{calc_ef2}}, \code{\link{calc_lm}}.
#'
#' @export
#' @examples
#' nem <- read_nem(tab = easynem_example("nemtab1.csv"),
#'                 tax = easynem_example("nemtax1.csv"),
#'                 meta = easynem_example("nemmeta1.csv"))
#' nem_lm <- nem |> calc_lm2(con_crop, season, x = pH, y = Fe)
calc_lm2 <- function(data, group1, group2, x, y, ...){
# data = nem
# group1 = "con_crop"
# group2 = "season"
# x = "pH"
# y = "Fe"
group1 = deparse(substitute(group1))
group2 = deparse(substitute(group2))
x = deparse(substitute(x))
y = deparse(substitute(y))
.lm = methods::new("lme2")
meta = tibble::as_tibble(data@meta)
meta = meta[,c(names(meta)[1], group1, group2, x, y)]
formu <- stats::as.formula(paste0(y, " ~ ", x))
results_list <- list()
meta |>
group_by(season) |>
do({
model <- lm(formu, data = .)
result <- summary(model)
results_list[[as.character(unique(.[[group2]]))]] <<- result
data.frame()
})
.lm@result = results_list
.lm@meta = tibble::as_tibble(meta)
return(.lm)
}
nem_lm <- nem |> calc_lm2(con_crop, season, x = pH, y = Fe)
nem_lm
rm(results_list)
#' \code{\link{calc_funguild}}, \code{\link{calc_funguild2}}, \code{\link{calc_mf2}},
#' \code{\link{calc_mf}}, \code{\link{calc_ter2}}, \code{\link{calc_ef}},
#' \code{\link{calc_ef2}}, \code{\link{calc_lm}}.
#'
#' @export
#' @examples
#' nem <- read_nem(tab = easynem_example("nemtab1.csv"),
#'                 tax = easynem_example("nemtax1.csv"),
#'                 meta = easynem_example("nemmeta1.csv"))
#' nem_lm <- nem |> calc_lm2(con_crop, season, x = pH, y = Fe)
calc_lm2 <- function(data, group1, group2, x, y, ...){
# data = nem
# group1 = "con_crop"
# group2 = "season"
# x = "pH"
# y = "Fe"
group1 = deparse(substitute(group1))
group2 = deparse(substitute(group2))
x = deparse(substitute(x))
y = deparse(substitute(y))
.lm = methods::new("lme2")
meta = tibble::as_tibble(data@meta)
meta = meta[,c(names(meta)[1], group1, group2, x, y)]
formu <- stats::as.formula(paste0(y, " ~ ", x))
results_list <- list()
meta |>
group_by(season) |>
do({
model <- lm(formu, data = .)
result <- summary(model)
results_list[[as.character(unique(.[[group2]]))]] <<- result
data.frame()
})
.lm@result = results_list
.lm@meta = tibble::as_tibble(meta)
return(.lm)
}
nem_lm <- nem |> calc_lm2(con_crop, season, x = pH, y = Fe)
