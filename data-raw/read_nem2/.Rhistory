tax <- read.csv("bactax.csv")
meta <- read.csv("design.csv")
read_nem2 <- function(tab=0, tax=0, meta=0, ...){
.easynem = methods::new("easynem")
if(!is.numeric(tab)){
tab = tab
colnames(tab)[1] = "OTUID"
.easynem@tab = tab
tab = as.data.frame(tab)
rownames(tab) = tab[,1]
tab = tab[,-1]
tab = t(tab)
tab = as.data.frame(tab)
tab$SampleID = rownames(tab)
tab = tab[,c(ncol(tab), 1:(ncol(tab)-1))]
colnames(tab)[1] = "SampleID"
tab = tibble::as_tibble(tab)
.easynem@meta = tab
} else {
warning("Otutab has not been imported yet\n")
}
if(!is.numeric(tax)){
tax = tax
colnames(tax)[1] = "OTUID"
tax = dplyr::as_tibble(tax)
.easynem@tax = tax
} else {
warning("Taxonomy has not been imported yet\n")
}
if(!is.numeric(meta) && is.numeric(tab)){
meta = meta
colnames(meta)[1] = "SampleID"
meta = dplyr::as_tibble(meta)
.easynem@meta = meta
} else if(!is.numeric(meta) && !is.numeric(tab)){
meta = meta
colnames(meta)[1] = "SampleID"
tab = .easynem@meta
meta = meta |> dplyr::left_join(tab, by = "SampleID")
meta = dplyr::as_tibble(meta)
.easynem@meta = meta
} else {
warning("Metadata has not been imported yet\n")
}
return(.easynem)
}
hehe <- read_nem2(tab = tab, tax = tax, meta = meta)
hehe
library(easynem)
tab <- read.csv("bacotu.csv")
tax <- read.csv("bactax.csv")
meta <- read.csv("design.csv")
read_nem2 <- function(tab=0, tax=0, meta=0, ...){
.easynem = methods::new("easynem")
if(!is.numeric(tab)){
tab = tab
colnames(tab)[1] = "OTUID"
tab = tibble::as_tibble(tab)
.easynem@tab = tab
tab = as.data.frame(tab)
rownames(tab) = tab[,1]
tab = tab[,-1]
tab = t(tab)
tab = as.data.frame(tab)
tab$SampleID = rownames(tab)
tab = tab[,c(ncol(tab), 1:(ncol(tab)-1))]
colnames(tab)[1] = "SampleID"
tab = tibble::as_tibble(tab)
.easynem@meta = tab
} else {
warning("Otutab has not been imported yet\n")
}
if(!is.numeric(tax)){
tax = tax
colnames(tax)[1] = "OTUID"
tax = dplyr::as_tibble(tax)
.easynem@tax = tax
} else {
warning("Taxonomy has not been imported yet\n")
}
if(!is.numeric(meta) && is.numeric(tab)){
meta = meta
colnames(meta)[1] = "SampleID"
meta = dplyr::as_tibble(meta)
.easynem@meta = meta
} else if(!is.numeric(meta) && !is.numeric(tab)){
meta = meta
colnames(meta)[1] = "SampleID"
tab = .easynem@meta
meta = meta |> dplyr::left_join(tab, by = "SampleID")
meta = dplyr::as_tibble(meta)
.easynem@meta = meta
} else {
warning("Metadata has not been imported yet\n")
}
return(.easynem)
}
hehe <- read_nem2(tab = tab, tax = tax, meta = meta)
hehe
hehe <- read_nem2(tab = tab, tax = tax)
hehe
bacotu <- read.csv("C:/Users/whkyg/Desktop/BaiduSyncdisk/easynem/data-raw/read_nem2/bacotu.csv")
View(bacotu)
load("C:/Users/whkyg/Desktop/BaiduSyncdisk/easynem/data-raw/read_nem2/sysdata.rda")
library(easynem)
tab <- read.csv("bacotu.csv")
tax <- read.csv("bactax.csv")
View(basis1)
View(genus1)
View(family1)
View(genus1)
load("C:/Users/whkyg/Desktop/BaiduSyncdisk/easynem/data-raw/read_nem2/sysdata.rda")
library(easynem)
tab <- read.csv("nemotu.csv")
tax <- read.csv("nemtax.csv")
meta <- read.csv("design.csv")
View(tax)
library(easynem)
tab <- read.csv("nemotu.csv")
tax <- read.csv("nemtax.csv")
meta <- read.csv("design.csv")
tab = tab
tax = tax
meta = meta
# tab = tab
# tax = tax
# meta = meta
.easynem = methods::new("easynem")
if(!is.numeric(tab)){
tab = tab
colnames(tab)[1] = "OTUID"
tab = tibble::as_tibble(tab)
.easynem@tab = tab
tab = as.data.frame(tab)
rownames(tab) = tab[,1]
tab = tab[,-1]
tab = t(tab)
tab = as.data.frame(tab)
tab$SampleID = rownames(tab)
tab = tab[,c(ncol(tab), 1:(ncol(tab)-1))]
colnames(tab)[1] = "SampleID"
tab = tibble::as_tibble(tab)
.easynem@meta = tab
} else {
warning("Otutab has not been imported yet\n")
}
if(!is.numeric(tax)){
tax = tax
colnames(tax)[1] = "OTUID"
tax = dplyr::as_tibble(tax)
.easynem@tax = tax
} else {
warning("Taxonomy has not been imported yet\n")
}
if(!is.numeric(meta) && is.numeric(tab)){
meta = meta
colnames(meta)[1] = "SampleID"
meta = dplyr::as_tibble(meta)
.easynem@meta = meta
} else if(!is.numeric(meta) && !is.numeric(tab)){
meta = meta
colnames(meta)[1] = "SampleID"
tab = .easynem@meta
meta = meta |> dplyr::left_join(tab, by = "SampleID")
meta = dplyr::as_tibble(meta)
.easynem@meta = meta
} else {
warning("Metadata has not been imported yet\n")
}
.easynem@tax
View(tax)
.easynem@tax$Phylum
"Nematoda" %in% .easynem@tax$Phylum
View(genus1)
View(basis1)
basis1 <- basis1[!(is.na(basis1[,4]) & is.na(basis1[,5])), ]
View(basis1)
View(genus1)
View(basis1)
View(genus1)
View(genus1)
View(genus1)
View(family1)
View(basis1)
?intersect
View(basis1)
View(genus1)
View(basis1)
basis1 = basis1[,-c(1,3,6)]
View(basis1)
load("C:/Users/whkyg/Desktop/BaiduSyncdisk/easynem/data-raw/read_nem2/sysdata.rda")
library(easynem)
tab <- read.csv("nemotu.csv")
tax <- read.csv("nemtax.csv")
meta <- read.csv("design.csv")
# tab = tab
# tax = tax
# meta = meta
.easynem = methods::new("easynem")
if(!is.numeric(tab)){
tab = tab
colnames(tab)[1] = "OTUID"
tab = tibble::as_tibble(tab)
.easynem@tab = tab
tab = as.data.frame(tab)
rownames(tab) = tab[,1]
tab = tab[,-1]
tab = t(tab)
tab = as.data.frame(tab)
tab$SampleID = rownames(tab)
tab = tab[,c(ncol(tab), 1:(ncol(tab)-1))]
colnames(tab)[1] = "SampleID"
tab = tibble::as_tibble(tab)
.easynem@meta = tab
} else {
warning("Otutab has not been imported yet\n")
}
if(!is.numeric(tax)){
tax = tax
colnames(tax)[1] = "OTUID"
tax = dplyr::as_tibble(tax)
.easynem@tax = tax
if("Nematoda" %in% .easynem@tax$Phylum) {
basis1 = basis1[!(is.na(basis1[,4]) & is.na(basis1[,5])), ]
basis1 = basis1[,-c(1,3,6)]
}
} else {
warning("Taxonomy has not been imported yet\n")
}
load("C:/Users/whkyg/Desktop/BaiduSyncdisk/easynem/data-raw/read_nem2/sysdata.rda")
library(easynem)
tab <- read.csv("nemotu.csv")
tax <- read.csv("nemtax.csv")
meta <- read.csv("design.csv")
# tab = tab
# tax = tax
# meta = meta
.easynem = methods::new("easynem")
if(!is.numeric(tab)){
tab = tab
colnames(tab)[1] = "OTUID"
tab = tibble::as_tibble(tab)
.easynem@tab = tab
tab = as.data.frame(tab)
rownames(tab) = tab[,1]
tab = tab[,-1]
tab = t(tab)
tab = as.data.frame(tab)
tab$SampleID = rownames(tab)
tab = tab[,c(ncol(tab), 1:(ncol(tab)-1))]
colnames(tab)[1] = "SampleID"
tab = tibble::as_tibble(tab)
.easynem@meta = tab
} else {
warning("Otutab has not been imported yet\n")
}
tax = tax
colnames(tax)[1] = "OTUID"
tax = dplyr::as_tibble(tax)
.easynem@tax = tax
basis = basis1[!(is.na(basis1[,4]) & is.na(basis1[,5])), ]
View(basis)
basis = basis[,-c(2,3,6)]
View(basis)
View(genus1)
View(family1)
View(genus1)
View(Feeding1)
View(genus1)
View(basis)
colnames(basis) = colnames(genus1)[,1:3]
names(basis) = names(genus1)[1:3]
View(basis)
intername = intersect(genus1$Genus, basis$Genus)
basis_ = basis |> dplyr::filter(!Genus %in% intername)
View(basis_)
View(genus1)
?rbind
genus = rbind(genus1, basis_)
names(basis) = names(genus1)
View(basis_)
library(tidyverse)
library(ggpubr)
library(data.table)
library(dplyr)
library(rio)
library(readxl)
library(cowplot)
#mj <- read_excel("C:\\Users\\Ma Jing\\Desktop\\xiangguan\\mj.xlsx")
df = iris
df <- df %>% filter(Species %in% c("setosa","versicolor"))
df
View(df)
# df$Species <- factor(df$Species)
ggplot(df, aes(Sepal.Length, Sepal.Width,colour=Species,shape=Species))+
geom_point(size = 4)+
geom_smooth(method = "lm", aes(color = Species, fill = Species),alpha=0.1)+
scale_shape_manual(values=c(16,17))+
#stat_smooth(method = 'lm', formula = 'y~x',level = 0.99)+
stat_cor(aes(color = Species), method = "pearson")+
theme_bw()
p
View(basis_)
basis_[,4:27] = NA
View(basis_)
genus = rbind(genus1, basis_)
names(basis_)[4:27] = names(genus1)[4:27]
genus = rbind(genus1, basis_)
View(genus)
rownames(genus) = genus[,1]
View(genus)
View(genus1)
?distinct
genus = dplyr::distinct(genus)
genus = rbind(genus1, basis_)
genus = dplyr::distinct(genus)
rownames(genus) = genus[,1]
View(genus)
View(genus1)
View(tax)
View(genus)
hehe = merge(tax,genus,by = "Genus")
View(hehe)
hehe = merge(tax,genus,by = "Genus", all = TRUE)
View(hehe)
hehe = merge(tax,genus,by = "Genus", all.X = TRUE)
View(hehe)
View(tax)
View(tax)
View(genus)
hehe = dplyr::left_join(tax,genus,by = "Genus", all.X = TRUE)
hehe = dplyr::left_join(tax,genus,by = "Genus")
View(hehe)
View(hehe)
View(hehe)
hehe = dplyr::left_join(tax,genus,by = "Genus")
View(hehe)
?all
?is.na
na_rows <- apply(hehe[, 9:34], 1, function(row) all(is.na(row)))
hehe_na_rows <- hehe[na_rows, ]
View(hehe_na_rows)
View(family1)
hehe2 = dplyr::left_join(tax,family1,by = "Family")
View(hehe2)
View(hehe_na_rows)
hehe2 = dplyr::left_join(hehe_na_rows,family1,by = "Family")
View(hehe2)
View(family1)
View(family1)
View(family1)
View(tax)
View(hehe_na_rows)
hehe_na_rows = hehe[na_rows, ]
hehe_na_rows = hehe_na_rows[,1:8]
View(hehe_na_rows)
hehe2 = dplyr::left_join(hehe_na_rows,family1,by = "Family")
View(hehe2)
View(family1)
View(hehe2)
View(hehe_na_rows)
View(hehe2)
tab <- read.csv("nemotu.csv")
tax <- read.csv("nemtax(1).csv")
meta <- read.csv("design.csv")
# tab = tab
# tax = tax
# meta = meta
.easynem = methods::new("easynem")
if(!is.numeric(tab)){
tab = tab
colnames(tab)[1] = "OTUID"
tab = tibble::as_tibble(tab)
.easynem@tab = tab
tab = as.data.frame(tab)
rownames(tab) = tab[,1]
tab = tab[,-1]
tab = t(tab)
tab = as.data.frame(tab)
tab$SampleID = rownames(tab)
tab = tab[,c(ncol(tab), 1:(ncol(tab)-1))]
colnames(tab)[1] = "SampleID"
tab = tibble::as_tibble(tab)
.easynem@meta = tab
} else {
warning("Otutab has not been imported yet\n")
}
tax = tax
colnames(tax)[1] = "OTUID"
tax = dplyr::as_tibble(tax)
.easynem@tax = tax
basis = basis1[!(is.na(basis1[,4]) & is.na(basis1[,5])), ]
basis = basis[,-c(2,3,6)]
names(basis) = names(genus1)[1:3]
intername = intersect(genus1$Genus, basis$Genus)
basis_ = basis |> dplyr::filter(!Genus %in% intername)
basis_[,4:27] = NA
names(basis_)[4:27] = names(genus1)[4:27]
genus = rbind(genus1, basis_)
genus = dplyr::distinct(genus)
hehe = dplyr::left_join(tax,genus,by = "Genus")
na_rows = apply(hehe[, 9:34], 1, function(row) all(is.na(row)))
hehe_na_rows = hehe[na_rows, ]
hehe_na_rows = hehe_na_rows[,1:8]
hehe2 = dplyr::left_join(hehe_na_rows,family1,by = "Family")
View(hehe2)
View(hehe2)
hehe = hehe[!na_rows,]
View(hehe)
hehe_all = rbind(hehe,hehe2)
View(hehe2)
View(family1)
View(hehe2)
hehe2 = hehe2[,-c(11,12)]
View(hehe2)
View(hehe)
hehe = hehe[!na_rows,]
View(hehe)
View(hehe)
hehe_all = rbind(hehe,hehe2)
View(hehe)
View(hehe2)
colnames(hehe)
colnames(hehe2)
names(hehe2) = names(hehe)
hehe_all = rbind(hehe,hehe2)
View(hehe_all)
rownames(hehe_all) = hehe_all[,1]
hehe_all = as.data.frame(hehe_all)
rownames(hehe_all) = hehe_all[,1]
View(hehe_all)
tab <- read.csv("nemotu.csv")
tax <- read.csv("nemtax(1).csv")
meta <- read.csv("design.csv")
read_nem2 <- function(tab=0, tax=0, meta=0, ...){
# tab = tab
# tax = tax
# meta = meta
.easynem = methods::new("easynem")
if(!is.numeric(tab)){
tab = tab
colnames(tab)[1] = "OTUID"
tab = tibble::as_tibble(tab)
.easynem@tab = tab
tab = as.data.frame(tab)
rownames(tab) = tab[,1]
tab = tab[,-1]
tab = t(tab)
tab = as.data.frame(tab)
tab$SampleID = rownames(tab)
tab = tab[,c(ncol(tab), 1:(ncol(tab)-1))]
colnames(tab)[1] = "SampleID"
tab = tibble::as_tibble(tab)
.easynem@meta = tab
} else {
warning("Otutab has not been imported yet\n")
}
if(!is.numeric(tax)){
tax = tax
colnames(tax)[1] = "OTUID"
tax = dplyr::as_tibble(tax)
.easynem@tax = tax
if("Nematoda" %in% .easynem@tax$Phylum) {
basis = basis1[!(is.na(basis1[,4]) & is.na(basis1[,5])), ]
basis = basis[,-c(2,3,6)]
names(basis) = names(genus1)[1:3]
intername = intersect(genus1$Genus, basis$Genus)
basis_ = basis |> dplyr::filter(!Genus %in% intername)
basis_[,4:27] = NA
names(basis_)[4:27] = names(genus1)[4:27]
genus = rbind(genus1, basis_)
genus = dplyr::distinct(genus)
hehe = dplyr::left_join(.easynem@tax,genus,by = "Genus")
na_rows = apply(hehe[, 9:34], 1, function(row) all(is.na(row)))
hehe_na_rows = hehe[na_rows, ]
hehe_na_rows = hehe_na_rows[,1:8]
hehe2 = dplyr::left_join(hehe_na_rows,family1,by = "Family")
hehe2 = hehe2[,-c(11,12)]
hehe = hehe[!na_rows,]
names(hehe2) = names(hehe)
hehe_all = rbind(hehe,hehe2)
.easynem@tax = hehe_all
}
} else {
warning("Taxonomy has not been imported yet\n")
}
if(!is.numeric(meta) && is.numeric(tab)){
meta = meta
colnames(meta)[1] = "SampleID"
meta = dplyr::as_tibble(meta)
.easynem@meta = meta
} else if(!is.numeric(meta) && !is.numeric(tab)){
meta = meta
colnames(meta)[1] = "SampleID"
tab = .easynem@meta
meta = meta |> dplyr::left_join(tab, by = "SampleID")
meta = dplyr::as_tibble(meta)
.easynem@meta = meta
} else {
warning("Metadata has not been imported yet\n")
}
#
return(.easynem)
}
hehe <- read_nem2(tab = tab, tax = tax, meta = meta)
hehe
hehe <- read_nem2(tab = tab, tax = tax)
hehe
View(hehe)
z = hehe@tax
View(z)
hehe
