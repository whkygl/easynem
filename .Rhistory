names(basis) = names(genus1)[1:3]
View(basis)
intername = intersect(genus1$Genus, basis$Genus)
basis_ = basis |> dplyr::filter(!Genus %in% intername)
View(basis_)
basis_[,4:27] = NA
names(basis_)[4:27] = names(genus1)[4:27]
View(basis_)
genus = rbind(genus1, basis_)
View(genus)
genus1
basis_
View(genus)
genus = dplyr::distinct(genus)
hehe = dplyr::left_join(.easynem@tax,genus,by = "Genus")
View(hehe)
View(hehe)
colnames(tax)[1] = "OTUID"
.easynem@tax = tax
basis = basis1[!(is.na(basis1[,4]) & is.na(basis1[,5])), ]
View(basis)
View(basis)
basis = basis[,-c(2,3,6)]
names(genus1)
names(basis) = names(genus1)[1:3]
intername = intersect(genus1$Genus, basis$Genus)
basis_ = basis |> dplyr::filter(!Genus %in% intername)
basis_[,4:27] = NA
names(basis_)[4:27] = names(genus1)[4:27]
genus = rbind(genus1, basis_)
genus = dplyr::distinct(genus)
hehe = dplyr::left_join(.easynem@tax,genus,by = "Genus")
View(hehe)
names(tax)
?length
(length(names(tax))+1)
(length(names(tax))+26)
View(hehe)
View(hehe)
na_rows = apply(hehe[, (length(names(tax))+1):(length(names(tax))+26)], 1, function(row) all(is.na(row)))
hehe_na_rows = hehe[na_rows, ]
hehe_na_rows = hehe_na_rows[,1:8]
hehe2 = dplyr::left_join(hehe_na_rows,family1,by = "Family")
hehe2 = hehe2[,-c(11,12)]
hehe = hehe[!na_rows,]
names(hehe2) = names(hehe)
hehe_all = rbind(hehe,hehe2)
hehe = dplyr::left_join(.easynem@tax,genus,by = "Genus")
na_rows = apply(hehe[, (length(names(tax))+1):(length(names(tax))+26)], 1, function(row) all(is.na(row)))
hehe_na_rows = hehe[na_rows, ]
View(hehe_na_rows)
colnames(tax)[1] = "OTUID"
.easynem@tax = tax
basis = basis1[!(is.na(basis1[,4]) & is.na(basis1[,5])), ]
basis = basis[,-c(2,3,6)]
names(basis) = names(genus1)[1:3]
intername = intersect(genus1$Genus, basis$Genus)
basis_ = basis |> dplyr::filter(!Genus %in% intername)
basis_[,4:27] = NA
names(basis_)[4:27] = names(genus1)[4:27]
genus = rbind(genus1, basis_)
genus = dplyr::distinct(genus)
hehe = dplyr::left_join(.easynem@tax,genus,by = "Genus")
na_rows = apply(hehe[, (length(names(tax))+1):(length(names(tax))+26)], 1, function(row) all(is.na(row)))
hehe_na_rows = hehe[na_rows, ]
View(hehe_na_rows)
hehe_na_rows = hehe_na_rows[,1:length(names(tax))]
View(hehe_na_rows)
hehe2 = dplyr::left_join(hehe_na_rows,family1,by = "Family")
View(hehe2)
View(hehe2)
View(hehe_all)
View(hehe2)
View(hehe)
intername2 = intersect(names(hehe), names(hehe2))
hehe2 = hehe2[,intername2]
View(hehe2)
View(hehe2)
View(hehe2)
basis = basis1[!(is.na(basis1[,4]) & is.na(basis1[,5])), ]
basis = basis[,-c(2,3,6)]
names(basis) = names(genus1)[1:3]
intername = intersect(genus1$Genus, basis$Genus)
basis_ = basis |> dplyr::filter(!Genus %in% intername)
basis_[,4:27] = NA
names(basis_)[4:27] = names(genus1)[4:27]
genus = rbind(genus1, basis_)
genus = dplyr::distinct(genus)
hehe = dplyr::left_join(.easynem@tax,genus,by = "Genus")
na_rows = apply(hehe[, (length(names(tax))+1):(length(names(tax))+26)], 1, function(row) all(is.na(row)))
hehe_na_rows = hehe[na_rows, ]
hehe_na_rows = hehe_na_rows[,1:length(names(tax))]
hehe2 = dplyr::left_join(hehe_na_rows,family1,by = "Family")
names(hehe)
names(hehe2)
hehe2 = hehe2[,-c(length(tax)+3, length(tax)+4)]
hehe = hehe[!na_rows,]
names(hehe2) = names(hehe)
hehe_all = rbind(hehe,hehe2)
View(hehe_all)
check()
document()
check()
check()
load_all()
?read_nem
document()
check()
load_all()
?read_nem
??easynem_example
#' facilitate the subsequent screening and management of nematode data. When this
#' class is generated, it will automatically check whether there is nematode
#' information in the species classification table. If not, it will not be
#' associated with the nematode database.
#'
#' @seealso \code{\link{read_nem}}
#' @export
#' @examples
#' easynem <- read_nem(tab = nemtab, tax = nemtax, meta = nemmeta)
#' show(easynem)
read_nem2 <- function(tab=0, tax=0, meta=0, ...){
.easynem = methods::new("easynem")
if(!is.numeric(tab)){
tab = tab
colnames(tab)[1] = "OTUID"
tab = tibble::as_tibble(tab)
.easynem@tab = tab
tab = as.data.frame(tab)
rownames(tab) = tab[,1]
tab = tab[,-1]
tab = t(tab)
tab = as.data.frame(tab)
tab$SampleID = rownames(tab)
tab = tab[,c(ncol(tab), 1:(ncol(tab)-1))]
colnames(tab)[1] = "SampleID"
tab = tibble::as_tibble(tab)
.easynem@meta = tab
} else {
warning("Otutab has not been imported yet\n")
}
if(!is.numeric(tax)){
tax = tax
colnames(tax)[1] = "OTUID"
tax = dplyr::as_tibble(tax)
.easynem@tax = tax
if("Nematoda" %in% .easynem@tax$Phylum) {
basis = basis1[!(is.na(basis1[,4]) & is.na(basis1[,5])), ]
basis = basis[,-c(2,3,6)]
names(basis) = names(genus1)[1:3]
intername = intersect(genus1$Genus, basis$Genus)
basis_ = basis |> dplyr::filter(!Genus %in% intername)
basis_[,4:27] = NA
names(basis_)[4:27] = names(genus1)[4:27]
genus = rbind(genus1, basis_)
genus = dplyr::distinct(genus)
hehe = dplyr::left_join(.easynem@tax,genus,by = "Genus")
na_rows = apply(hehe[, (length(tax)+1):(length(tax)+26)], 1, function(row) all(is.na(row)))
hehe_na_rows = hehe[na_rows, ]
hehe_na_rows = hehe_na_rows[,1:length(tax)]
hehe2 = dplyr::left_join(hehe_na_rows,family1,by = "Family")
hehe2 = hehe2[,-c(length(tax)+3, length(tax)+4)]
hehe = hehe[!na_rows,]
names(hehe2) = names(hehe)
hehe_all = rbind(hehe,hehe2)
.easynem@tax = hehe_all
}
} else {
warning("Taxonomy has not been imported yet\n")
}
if(!is.numeric(meta) && is.numeric(tab)){
meta = meta
colnames(meta)[1] = "SampleID"
meta = dplyr::as_tibble(meta)
.easynem@meta = meta
} else if(!is.numeric(meta) && !is.numeric(tab)){
meta = meta
colnames(meta)[1] = "SampleID"
tab = .easynem@meta
meta = meta |> dplyr::left_join(tab, by = "SampleID")
meta = dplyr::as_tibble(meta)
.easynem@meta = meta
} else {
warning("Metadata has not been imported yet\n")
}
return(.easynem)
}
easynem <- read_nem2(tab = nemtab, tax = nemtax, meta = nemmeta)
library(easynem)
#' facilitate the subsequent screening and management of nematode data. When this
#' class is generated, it will automatically check whether there is nematode
#' information in the species classification table. If not, it will not be
#' associated with the nematode database.
#'
#' @seealso \code{\link{read_nem}}
#' @export
#' @examples
#' easynem <- read_nem(tab = nemtab, tax = nemtax, meta = nemmeta)
#' show(easynem)
read_nem2 <- function(tab=0, tax=0, meta=0, ...){
.easynem = methods::new("easynem")
if(!is.numeric(tab)){
tab = tab
colnames(tab)[1] = "OTUID"
tab = tibble::as_tibble(tab)
.easynem@tab = tab
tab = as.data.frame(tab)
rownames(tab) = tab[,1]
tab = tab[,-1]
tab = t(tab)
tab = as.data.frame(tab)
tab$SampleID = rownames(tab)
tab = tab[,c(ncol(tab), 1:(ncol(tab)-1))]
colnames(tab)[1] = "SampleID"
tab = tibble::as_tibble(tab)
.easynem@meta = tab
} else {
warning("Otutab has not been imported yet\n")
}
if(!is.numeric(tax)){
tax = tax
colnames(tax)[1] = "OTUID"
tax = dplyr::as_tibble(tax)
.easynem@tax = tax
if("Nematoda" %in% .easynem@tax$Phylum) {
basis = basis1[!(is.na(basis1[,4]) & is.na(basis1[,5])), ]
basis = basis[,-c(2,3,6)]
names(basis) = names(genus1)[1:3]
intername = intersect(genus1$Genus, basis$Genus)
basis_ = basis |> dplyr::filter(!Genus %in% intername)
basis_[,4:27] = NA
names(basis_)[4:27] = names(genus1)[4:27]
genus = rbind(genus1, basis_)
genus = dplyr::distinct(genus)
hehe = dplyr::left_join(.easynem@tax,genus,by = "Genus")
na_rows = apply(hehe[, (length(tax)+1):(length(tax)+26)], 1, function(row) all(is.na(row)))
hehe_na_rows = hehe[na_rows, ]
hehe_na_rows = hehe_na_rows[,1:length(tax)]
hehe2 = dplyr::left_join(hehe_na_rows,family1,by = "Family")
hehe2 = hehe2[,-c(length(tax)+3, length(tax)+4)]
hehe = hehe[!na_rows,]
names(hehe2) = names(hehe)
hehe_all = rbind(hehe,hehe2)
.easynem@tax = hehe_all
}
} else {
warning("Taxonomy has not been imported yet\n")
}
if(!is.numeric(meta) && is.numeric(tab)){
meta = meta
colnames(meta)[1] = "SampleID"
meta = dplyr::as_tibble(meta)
.easynem@meta = meta
} else if(!is.numeric(meta) && !is.numeric(tab)){
meta = meta
colnames(meta)[1] = "SampleID"
tab = .easynem@meta
meta = meta |> dplyr::left_join(tab, by = "SampleID")
meta = dplyr::as_tibble(meta)
.easynem@meta = meta
} else {
warning("Metadata has not been imported yet\n")
}
return(.easynem)
}
easynem <- read_nem2(tab = nemtab, tax = nemtax, meta = nemmeta)
library(devtools)
document()
document()
check()
document()
document()
check()
?filter
nem <- read_nem2(tab = nemtab, tax = nemtax, meta = nemmeta)
library(devtools)
document()
check()
check()
document()
check()
library(devtools)
document()
check()
library(devtools)
document()
check(\)
check()
library(devtools)
document()
check()
data(nemtab)
View(nemtab)
log(10)
ln(10)
log(10,10)
?log
2^2.302585
library(devtools)
document()
check()
library(easynem)
easynem <- read_nem2(tab = nemtab, tax = nemtax, meta = nemmeta)
data= easynem
var = "Mesorhabditis"
formu = ~log(x+1)
resultmeta = data@meta
suppressWarnings(resultmeta[[var]] <-  eval(formu[[2]], list(x = data@meta[[var]]),environment(formu)))
data@meta = resultmeta
resultmeta
tab = as.data.frame(data@tab)
rownames(tab) = tab[,1]
tab = tab[,-1]
tab = t(tab)
tab = as.data.frame(tab)
tab$SampleID = rownames(tab)
tab = tab[,c(ncol(tab), 1:(ncol(tab)-1))]
colnames(tab)[1] = "SampleID"
meta = data@meta
colnames(meta)[1] = "SampleID"
meta
tab
any(names(tab)[-1] %in% names(meta)[-1])
?is.character
?is.num
char_columns <- sapply(meta, !is.character)
char_columns <- sapply(meta, is.character)
char_columns
char_columns <- !sapply(meta, is.character)
char_columns
meta
tab
tab[var]
tab[var] = meta[var]
tab
meta
tab
library(devtools)
document()
check()
nem <- read_nem2(tab = nemtab, tax = nemtax, meta = nemmeta)
nem@tab
rownames(nem@tab)
nem@tab$OTUID
data = nem
var = nem@tab$OTUID
formu=~log(x+1)
# resultmeta = meta@meta
# var = colnames(resultmeta)[5:10]
# formu = ~1/x
resultmeta = data@meta
resultmeta[var] <- eval(formu[[2]], list(x = resultmeta[var]), environment(formu))
data@meta = resultmeta
tab = as.data.frame(data@tab)
rownames(tab) = tab[,1]
tab = tab[,-1]
tab = t(tab)
tab = as.data.frame(tab)
tab$SampleID = rownames(tab)
tab = tab[,c(ncol(tab), 1:(ncol(tab)-1))]
colnames(tab)[1] = "SampleID"
meta = data@meta
colnames(meta)[1] = "SampleID"
meta
tab
tab[var]
tab[var] = meta[var]
tab
meta = tibble::as_tibble(meta)
library(devtools)
document()
check()
library(easynem)
?read_nem2
easynem <- read_nem2(tab = nemtab, tax = nemtax, meta = nemmeta)
show(easynem)
?nem_database
easynem
data = easynem
taxonomy = "feeding"
tax = data@tax
tab = data@tab
intersect1 = intersect(tax[[1]], tab[[1]])
tax = tax[tax[[1]] %in% intersect1, ]
tab = tab[tab[[1]] %in% intersect1, ]
if(nametax %in% colnames(data@tax)){
if(nametax == colnames(data@tax)[1]){
tax = tax[match(tab[[1]], tax[[1]]), ]
} else {
tax = tax[match(tab[[1]], tax[[1]]), ]
tab[[1]] = tax[[nametax]]
colnames(tab)[1] = nametax
tab = tab |> dplyr::group_by(!!rlang::sym(nametax)) |> dplyr::summarise_all(sum)
}
} else {
stop("Please check that the taxonomy name are correct")
}
nametax=taxonomy
if(nametax %in% colnames(data@tax)){
if(nametax == colnames(data@tax)[1]){
tax = tax[match(tab[[1]], tax[[1]]), ]
} else {
tax = tax[match(tab[[1]], tax[[1]]), ]
tab[[1]] = tax[[nametax]]
colnames(tab)[1] = nametax
tab = tab |> dplyr::group_by(!!rlang::sym(nametax)) |> dplyr::summarise_all(sum)
}
} else {
stop("Please check that the taxonomy name are correct")
}
data@tax = tax
data@tab = tab
tab
tax
tab = as.data.frame(data@tab)
rownames(tab) = tab[,1]
tab = tab[,-1]
tab = t(tab)
tab = as.data.frame(tab)
tab$SampleID = rownames(tab)
tab = tab[,c(ncol(tab), 1:(ncol(tab)-1))]
colnames(tab)[1] = "SampleID"
meta = data@meta
colnames(meta)[1] = "SampleID"
tab
meta
easynem
tax = data@tax
tab = data@tab
intersect1 = intersect(tax[[1]], tab[[1]])
tax = tax[tax[[1]] %in% intersect1, ]
tab = tab[tab[[1]] %in% intersect1, ]
if(nametax %in% colnames(data@tax)){
if(nametax == colnames(data@tax)[1]){
tax = tax[match(tab[[1]], tax[[1]]), ]
} else {
tax = tax[match(tab[[1]], tax[[1]]), ]
tab[[1]] = tax[[nametax]]
colnames(tab)[1] = nametax
tab = tab |> dplyr::group_by(!!rlang::sym(nametax)) |> dplyr::summarise_all(sum)
}
} else {
stop("Please check that the taxonomy name are correct")
}
data@tax = tax
data@tab = tab
tab = as.data.frame(data@tab)
rownames(tab) = tab[,1]
tab = tab[,-1]
tab = t(tab)
tab = as.data.frame(tab)
tab$SampleID = rownames(tab)
tab = tab[,c(ncol(tab), 1:(ncol(tab)-1))]
colnames(tab)[1] = "SampleID"
meta = data@meta
colnames(meta)[1] = "SampleID"
tab
nem <- read_nem2(tab = nemtab, tax = nemtax, meta = nemmeta)
data = nem
taxonomy = "feeding"
nametax="feeding"
tax = data@tax
tab = data@tab
intersect1 = intersect(tax[[1]], tab[[1]])
tax = tax[tax[[1]] %in% intersect1, ]
tab = tab[tab[[1]] %in% intersect1, ]
if(nametax %in% colnames(data@tax)){
if(nametax == colnames(data@tax)[1]){
tax = tax[match(tab[[1]], tax[[1]]), ]
} else {
tax = tax[match(tab[[1]], tax[[1]]), ]
tab[[1]] = tax[[nametax]]
colnames(tab)[1] = nametax
tab = tab |> dplyr::group_by(!!rlang::sym(nametax)) |> dplyr::summarise_all(sum)
}
} else {
stop("Please check that the taxonomy name are correct")
}
data@tax = tax
data@tab = tab
tab = as.data.frame(data@tab)
rownames(tab) = tab[,1]
tab = tab[,-1]
tab = t(tab)
tab = as.data.frame(tab)
tab$SampleID = rownames(tab)
tab = tab[,c(ncol(tab), 1:(ncol(tab)-1))]
colnames(tab)[1] = "SampleID"
meta = data@meta
colnames(meta)[1] = "SampleID"
tab
meta
data@tab
meta
tab
if(any(names(tab)[-1] %in% names(meta)[-1])){
char_columns <- sapply(meta, is.character)
meta = meta[,char_columns]
meta = merge(meta, tab, by = "SampleID")
} else {
meta = merge(meta, tab, by = "SampleID")
}
meta = tibble::as_tibble(meta)
data@meta = meta
return(data)
data
library(devtools)
document()
check()
document(*)
document()
check()
