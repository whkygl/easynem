aes(x=group1,y=len+20,label=groups),
color="#eb7369",
size = 8)+#添加字母标记
geom_text(data=mark3,
aes(x=group1,y=len+10,label=groups),
color="#F5AA6E",
size = 8)
p <-  ToothGrowth %>%  # 使用ToothGrowth数据集作为输入，并将结果赋值给p2变量
mutate(group1 = as.factor(dose)) %>%  # 将dose列的值转换为因子类型（离散分类变量）
group_by(dose,supp) %>%  # 根据dose和supp两列进行分组
ggplot(aes(x = group1, y = len,color = supp)) +  # 创建基础绘图对象
stat_summary(fun.y = "mean", geom = "point", size = 5) +  # 绘制点，表示每个组别的均值，点的大小为
stat_summary(fun.data = "mean_se", geom = "errorbar", width = 0.2,linewidth = 1) +  # 绘制误差条，表示每个组别的标准差，误差条宽度为0.05
#scale_color_nejm() +  # 调整颜色主题为NEJM主题
xlab("Trentment")+ylab("Plant input")+#横纵表标题
geom_text(
aes(x=group1,y=len+20,label=groups),
color="#1bb4b8",
size = 8)+#添加字母标记
geom_text(
aes(x=group1,y=len+20,label=groups),
color="#eb7369",
size = 8)+#添加字母标记
geom_text(
aes(x=group1,y=len+10,label=groups),
color="#F5AA6E",
size = 8)
p
nemgenus <- read.csv("C:/Users/whkyg/Desktop/BaiduSyncdisk/easynem/inst/extdata/nemgenus.csv")
View(nemgenus)
class(nemgenus)
library(tidyverse)
install.packages("ggplot2")
library(tidyverse)
install.packages("ggplot2")
library(tidyverse)
nemgenus <- read.csv("C:/Users/whkyg/Desktop/BaiduSyncdisk/easynem/inst/extdata/nemgenus.csv")
View(nemgenus)
nemtab <- read_csv("C:/Users/whkyg/Desktop/BaiduSyncdisk/easynem/inst/extdata/nemgenus.csv")
class(nemtab)
View(nemtab)
View(nemtab)
use_data(nemtab)
library(devtools)
use_data(nemtab)
use_r("nemtab")
load("C:/Users/whkyg/Desktop/桌面2024-07-17/ggplot2-main/data/diamonds.rda")
View(diamonds)
?diamonds
View(nemgenus)
View(nemgenus)
rm(diamonds)
diamonds
?@format
View(nemtab)
View(nemtab)
View(nemtab)
library(devtools)
document()
load_all()
?nemtab
??nemtab
document()
?nemtab
load_all()
?nemtab
document()
document()
document()
?nemtab
?nem_database
warnings()
document()
?nemtab
library(devtools)
checK()
cheak()
check()
nemmeta <- read.csv("C:/Users/whkyg/Desktop/BaiduSyncdisk/easynem/inst/extdata/nemmeta.csv")
View(nemmeta)
nemmeta <- read_csv("C:/Users/whkyg/Desktop/BaiduSyncdisk/easynem/inst/extdata/nemmeta.csv")
library(tidyverse)
?read_csv
nemmeta <- read_csv("C:/Users/whkyg/Desktop/BaiduSyncdisk/easynem/inst/extdata/nemmeta.csv")
View(nemmeta)
library(devtools)
use_data(nemmeta)
use_r("nemmeta")
View(nemmeta)
View(nemmeta)
View(nemmeta)
View(nemmeta)
document()
load_all()
nemmeta
?nemmeta
nemtax <- read_csv("C:/Users/whkyg/Desktop/BaiduSyncdisk/easynem/inst/extdata/nemtaxonomy.csv")
View(nemtax)
use_data(nemtax)
use_r("nemtax")
View(nemtax)
?nem_database
library(devtools)
document()
check()
install.packages("phyloseq")
source('http://bioconductor.org/biocLite.R')
biocLite('phyloseq')
library("devtools")
install_github("phyloseq/joey711")
install_github("phyloseq/joey711")
install_github("phyloseq/joey711")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
library(phyloseq)
?phyloseq
?phyloseq
library(devtools)
use_r("allClasses")
document()
load_all()
?easynem-class
?easynem
check()
check()
?easynem-class
load_all()
?easynem-class
help(easynem)
?read_nem
?easynem-class
?`ef2-class`
?`easynem-class`
library(devtools)
document()
check()
check()
document()
check()
check()
load_all()
?`easynem-class`
library(devtools)
document()
check()
check()
check()
easynem <- read_nem(tab = easynem_example("nemtab.csv"), tax = easynem_example("nemtax.csv"), meta = easynem_example("nemmeta.csv"))
tab = easynem_example("nemtab.csv")
tax = easynem_example("nemtax.csv")
meta = easynem_example("nemmeta.csv")
.easynem = methods::new("easynem")
if(tab != 0){
tab = readr::read_csv(tab, show_col_types = FALSE, ...)
colnames(tab)[1] = "OTUID"
.easynem@tab = tab
tab = as.data.frame(tab)
rownames(tab) = tab[,1]
tab = tab[,-1]
tab = t(tab)
tab = as.data.frame(tab)
tab$SampleID = rownames(tab)
tab = tab[,c(ncol(tab), 1:(ncol(tab)-1))]
colnames(tab)[1] = "SampleID"
tab = tibble::as_tibble(tab)
.easynem@meta = tab
} else {
warning("Otutab has not been imported yet\n")
}
if(tab != 0){
tab = readr::read_csv(tab, show_col_types = FALSE)
colnames(tab)[1] = "OTUID"
.easynem@tab = tab
tab = as.data.frame(tab)
rownames(tab) = tab[,1]
tab = tab[,-1]
tab = t(tab)
tab = as.data.frame(tab)
tab$SampleID = rownames(tab)
tab = tab[,c(ncol(tab), 1:(ncol(tab)-1))]
colnames(tab)[1] = "SampleID"
tab = tibble::as_tibble(tab)
.easynem@meta = tab
} else {
warning("Otutab has not been imported yet\n")
}
if(tax != 0){
tax = readr::read_csv(tax, show_col_types = FALSE)
colnames(tax)[1] = "OTUID"
.easynem@tax = tax
if("Nematoda" %in% .easynem@tax$Phylum) {
basis = basis1[!(is.na(basis1[,4]) & is.na(basis1[,5])), ]
basis = basis[,-c(2,3,6)]
names(basis) = names(genus1)[1:3]
intername = intersect(genus1$Genus, basis$Genus)
basis_ = basis |> dplyr::filter(!Genus %in% intername)
basis_[,4:27] = NA
names(basis_)[4:27] = names(genus1)[4:27]
genus = rbind(genus1, basis_)
genus = dplyr::distinct(genus)
hehe = dplyr::left_join(.easynem@tax,genus,by = "Genus")
na_rows = apply(hehe[, 9:34], 1, function(row) all(is.na(row)))
hehe_na_rows = hehe[na_rows, ]
hehe_na_rows = hehe_na_rows[,1:8]
hehe2 = dplyr::left_join(hehe_na_rows,family1,by = "Family")
hehe2 = hehe2[,-c(11,12)]
hehe = hehe[!na_rows,]
names(hehe2) = names(hehe)
hehe_all = rbind(hehe,hehe2)
.easynem@tax = hehe_all
}
} else {
warning("Taxonomy has not been imported yet\n")
}
tax = readr::read_csv(tax, show_col_types = FALSE)
tax
tab
tax
tab = easynem_example("nemtab.csv")
tax = easynem_example("nemtax.csv")
meta = easynem_example("nemmeta.csv")
tax = readr::read_csv(tax, show_col_types = FALSE)
tax
colnames(tax)[1] = "OTUID"
.easynem@tax = tax
basis = basis1[!(is.na(basis1[,4]) & is.na(basis1[,5])), ]
basis = basis[,-c(2,3,6)]
names(basis) = names(genus1)[1:3]
View(basis)
intername = intersect(genus1$Genus, basis$Genus)
basis_ = basis |> dplyr::filter(!Genus %in% intername)
View(basis_)
basis_[,4:27] = NA
names(basis_)[4:27] = names(genus1)[4:27]
View(basis_)
genus = rbind(genus1, basis_)
View(genus)
genus1
basis_
View(genus)
genus = dplyr::distinct(genus)
hehe = dplyr::left_join(.easynem@tax,genus,by = "Genus")
View(hehe)
View(hehe)
colnames(tax)[1] = "OTUID"
.easynem@tax = tax
basis = basis1[!(is.na(basis1[,4]) & is.na(basis1[,5])), ]
View(basis)
View(basis)
basis = basis[,-c(2,3,6)]
names(genus1)
names(basis) = names(genus1)[1:3]
intername = intersect(genus1$Genus, basis$Genus)
basis_ = basis |> dplyr::filter(!Genus %in% intername)
basis_[,4:27] = NA
names(basis_)[4:27] = names(genus1)[4:27]
genus = rbind(genus1, basis_)
genus = dplyr::distinct(genus)
hehe = dplyr::left_join(.easynem@tax,genus,by = "Genus")
View(hehe)
names(tax)
?length
(length(names(tax))+1)
(length(names(tax))+26)
View(hehe)
View(hehe)
na_rows = apply(hehe[, (length(names(tax))+1):(length(names(tax))+26)], 1, function(row) all(is.na(row)))
hehe_na_rows = hehe[na_rows, ]
hehe_na_rows = hehe_na_rows[,1:8]
hehe2 = dplyr::left_join(hehe_na_rows,family1,by = "Family")
hehe2 = hehe2[,-c(11,12)]
hehe = hehe[!na_rows,]
names(hehe2) = names(hehe)
hehe_all = rbind(hehe,hehe2)
hehe = dplyr::left_join(.easynem@tax,genus,by = "Genus")
na_rows = apply(hehe[, (length(names(tax))+1):(length(names(tax))+26)], 1, function(row) all(is.na(row)))
hehe_na_rows = hehe[na_rows, ]
View(hehe_na_rows)
colnames(tax)[1] = "OTUID"
.easynem@tax = tax
basis = basis1[!(is.na(basis1[,4]) & is.na(basis1[,5])), ]
basis = basis[,-c(2,3,6)]
names(basis) = names(genus1)[1:3]
intername = intersect(genus1$Genus, basis$Genus)
basis_ = basis |> dplyr::filter(!Genus %in% intername)
basis_[,4:27] = NA
names(basis_)[4:27] = names(genus1)[4:27]
genus = rbind(genus1, basis_)
genus = dplyr::distinct(genus)
hehe = dplyr::left_join(.easynem@tax,genus,by = "Genus")
na_rows = apply(hehe[, (length(names(tax))+1):(length(names(tax))+26)], 1, function(row) all(is.na(row)))
hehe_na_rows = hehe[na_rows, ]
View(hehe_na_rows)
hehe_na_rows = hehe_na_rows[,1:length(names(tax))]
View(hehe_na_rows)
hehe2 = dplyr::left_join(hehe_na_rows,family1,by = "Family")
View(hehe2)
View(hehe2)
View(hehe_all)
View(hehe2)
View(hehe)
intername2 = intersect(names(hehe), names(hehe2))
hehe2 = hehe2[,intername2]
View(hehe2)
View(hehe2)
View(hehe2)
basis = basis1[!(is.na(basis1[,4]) & is.na(basis1[,5])), ]
basis = basis[,-c(2,3,6)]
names(basis) = names(genus1)[1:3]
intername = intersect(genus1$Genus, basis$Genus)
basis_ = basis |> dplyr::filter(!Genus %in% intername)
basis_[,4:27] = NA
names(basis_)[4:27] = names(genus1)[4:27]
genus = rbind(genus1, basis_)
genus = dplyr::distinct(genus)
hehe = dplyr::left_join(.easynem@tax,genus,by = "Genus")
na_rows = apply(hehe[, (length(names(tax))+1):(length(names(tax))+26)], 1, function(row) all(is.na(row)))
hehe_na_rows = hehe[na_rows, ]
hehe_na_rows = hehe_na_rows[,1:length(names(tax))]
hehe2 = dplyr::left_join(hehe_na_rows,family1,by = "Family")
names(hehe)
names(hehe2)
hehe2 = hehe2[,-c(length(tax)+3, length(tax)+4)]
hehe = hehe[!na_rows,]
names(hehe2) = names(hehe)
hehe_all = rbind(hehe,hehe2)
View(hehe_all)
check()
document()
check()
check()
load_all()
?read_nem
document()
check()
load_all()
?read_nem
??easynem_example
#' facilitate the subsequent screening and management of nematode data. When this
#' class is generated, it will automatically check whether there is nematode
#' information in the species classification table. If not, it will not be
#' associated with the nematode database.
#'
#' @seealso \code{\link{read_nem}}
#' @export
#' @examples
#' easynem <- read_nem(tab = nemtab, tax = nemtax, meta = nemmeta)
#' show(easynem)
read_nem2 <- function(tab=0, tax=0, meta=0, ...){
.easynem = methods::new("easynem")
if(!is.numeric(tab)){
tab = tab
colnames(tab)[1] = "OTUID"
tab = tibble::as_tibble(tab)
.easynem@tab = tab
tab = as.data.frame(tab)
rownames(tab) = tab[,1]
tab = tab[,-1]
tab = t(tab)
tab = as.data.frame(tab)
tab$SampleID = rownames(tab)
tab = tab[,c(ncol(tab), 1:(ncol(tab)-1))]
colnames(tab)[1] = "SampleID"
tab = tibble::as_tibble(tab)
.easynem@meta = tab
} else {
warning("Otutab has not been imported yet\n")
}
if(!is.numeric(tax)){
tax = tax
colnames(tax)[1] = "OTUID"
tax = dplyr::as_tibble(tax)
.easynem@tax = tax
if("Nematoda" %in% .easynem@tax$Phylum) {
basis = basis1[!(is.na(basis1[,4]) & is.na(basis1[,5])), ]
basis = basis[,-c(2,3,6)]
names(basis) = names(genus1)[1:3]
intername = intersect(genus1$Genus, basis$Genus)
basis_ = basis |> dplyr::filter(!Genus %in% intername)
basis_[,4:27] = NA
names(basis_)[4:27] = names(genus1)[4:27]
genus = rbind(genus1, basis_)
genus = dplyr::distinct(genus)
hehe = dplyr::left_join(.easynem@tax,genus,by = "Genus")
na_rows = apply(hehe[, (length(tax)+1):(length(tax)+26)], 1, function(row) all(is.na(row)))
hehe_na_rows = hehe[na_rows, ]
hehe_na_rows = hehe_na_rows[,1:length(tax)]
hehe2 = dplyr::left_join(hehe_na_rows,family1,by = "Family")
hehe2 = hehe2[,-c(length(tax)+3, length(tax)+4)]
hehe = hehe[!na_rows,]
names(hehe2) = names(hehe)
hehe_all = rbind(hehe,hehe2)
.easynem@tax = hehe_all
}
} else {
warning("Taxonomy has not been imported yet\n")
}
if(!is.numeric(meta) && is.numeric(tab)){
meta = meta
colnames(meta)[1] = "SampleID"
meta = dplyr::as_tibble(meta)
.easynem@meta = meta
} else if(!is.numeric(meta) && !is.numeric(tab)){
meta = meta
colnames(meta)[1] = "SampleID"
tab = .easynem@meta
meta = meta |> dplyr::left_join(tab, by = "SampleID")
meta = dplyr::as_tibble(meta)
.easynem@meta = meta
} else {
warning("Metadata has not been imported yet\n")
}
return(.easynem)
}
easynem <- read_nem2(tab = nemtab, tax = nemtax, meta = nemmeta)
library(easynem)
#' facilitate the subsequent screening and management of nematode data. When this
#' class is generated, it will automatically check whether there is nematode
#' information in the species classification table. If not, it will not be
#' associated with the nematode database.
#'
#' @seealso \code{\link{read_nem}}
#' @export
#' @examples
#' easynem <- read_nem(tab = nemtab, tax = nemtax, meta = nemmeta)
#' show(easynem)
read_nem2 <- function(tab=0, tax=0, meta=0, ...){
.easynem = methods::new("easynem")
if(!is.numeric(tab)){
tab = tab
colnames(tab)[1] = "OTUID"
tab = tibble::as_tibble(tab)
.easynem@tab = tab
tab = as.data.frame(tab)
rownames(tab) = tab[,1]
tab = tab[,-1]
tab = t(tab)
tab = as.data.frame(tab)
tab$SampleID = rownames(tab)
tab = tab[,c(ncol(tab), 1:(ncol(tab)-1))]
colnames(tab)[1] = "SampleID"
tab = tibble::as_tibble(tab)
.easynem@meta = tab
} else {
warning("Otutab has not been imported yet\n")
}
if(!is.numeric(tax)){
tax = tax
colnames(tax)[1] = "OTUID"
tax = dplyr::as_tibble(tax)
.easynem@tax = tax
if("Nematoda" %in% .easynem@tax$Phylum) {
basis = basis1[!(is.na(basis1[,4]) & is.na(basis1[,5])), ]
basis = basis[,-c(2,3,6)]
names(basis) = names(genus1)[1:3]
intername = intersect(genus1$Genus, basis$Genus)
basis_ = basis |> dplyr::filter(!Genus %in% intername)
basis_[,4:27] = NA
names(basis_)[4:27] = names(genus1)[4:27]
genus = rbind(genus1, basis_)
genus = dplyr::distinct(genus)
hehe = dplyr::left_join(.easynem@tax,genus,by = "Genus")
na_rows = apply(hehe[, (length(tax)+1):(length(tax)+26)], 1, function(row) all(is.na(row)))
hehe_na_rows = hehe[na_rows, ]
hehe_na_rows = hehe_na_rows[,1:length(tax)]
hehe2 = dplyr::left_join(hehe_na_rows,family1,by = "Family")
hehe2 = hehe2[,-c(length(tax)+3, length(tax)+4)]
hehe = hehe[!na_rows,]
names(hehe2) = names(hehe)
hehe_all = rbind(hehe,hehe2)
.easynem@tax = hehe_all
}
} else {
warning("Taxonomy has not been imported yet\n")
}
if(!is.numeric(meta) && is.numeric(tab)){
meta = meta
colnames(meta)[1] = "SampleID"
meta = dplyr::as_tibble(meta)
.easynem@meta = meta
} else if(!is.numeric(meta) && !is.numeric(tab)){
meta = meta
colnames(meta)[1] = "SampleID"
tab = .easynem@meta
meta = meta |> dplyr::left_join(tab, by = "SampleID")
meta = dplyr::as_tibble(meta)
.easynem@meta = meta
} else {
warning("Metadata has not been imported yet\n")
}
return(.easynem)
}
easynem <- read_nem2(tab = nemtab, tax = nemtax, meta = nemmeta)
library(devtools)
document()
document()
check()
document()
document()
check()
?filter
nem <- read_nem2(tab = nemtab, tax = nemtax, meta = nemmeta)
library(devtools)
document()
check()
check()
document()
check()
library(devtools)
document()
check()
